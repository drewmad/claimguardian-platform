const fs = require('fs');const path = require('path');class LearningSystem {  constructor() {    this.learningsPath = path.join(__dirname, '../retrospectives/consolidated-learnings.json');    this.loadLearnings();  }  loadLearnings() {    if (fs.existsSync(this.learningsPath)) {      this.learnings = JSON.parse(fs.readFileSync(this.learningsPath, 'utf8'));    } else {      this.learnings = {        preflightChecks: [],        errorHandlers: {},        optimizations: []      };    }  }  getPreflightChecks(taskType) {    // Return checks to run before task    const checks = [...this.learnings.preflightChecks];        if (taskType === 'dependency_update') {      checks.push('pnpm deps:check');    }    if (taskType === 'code_generation') {      checks.push('tsc --noEmit');    }        return checks;  }  getErrorRecovery(errorType) {    return this.learnings.errorHandlers[errorType] || null;  }  consolidateLearnings() {    // Aggregate learnings from all retrospectives    const retrospectiveFiles = fs.readdirSync(path.join(__dirname, '../retrospectives'))      .filter(f => f.endsWith('.jsonl'));        const allLessons = [];    const errorPatterns = {};        retrospectiveFiles.forEach(file => {      const lines = fs.readFileSync(        path.join(__dirname, '../retrospectives', file),         'utf8'      ).split('\n');            lines.filter(l => l).forEach(line => {        const retro = JSON.parse(line);        allLessons.push(...(retro.lessons || []));                // Build error recovery strategies        if (retro.errors && retro.improvements) {          retro.errors.forEach((error, i) => {            if (retro.improvements[i]) {              errorPatterns[error] = retro.improvements[i];            }          });        }      });    });        // Update learnings    this.learnings = {      preflightChecks: [...new Set(allLessons)].slice(0, 10),      errorHandlers: errorPatterns,      optimizations: [],      lastUpdated: new Date().toISOString()    };        fs.writeFileSync(this.learningsPath, JSON.stringify(this.learnings, null, 2));  }}module.exports = LearningSystem;