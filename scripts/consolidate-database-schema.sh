#!/bin/bash

# Database Schema Consolidation Script
# Consolidates multiple schema files into single source of truth

set -euo pipefail

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

error() {
    echo -e "${RED}ERROR: $1${NC}" >&2
    exit 1
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

warn() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Check if we're in the right directory
if [[ ! -f "package.json" ]]; then
    error "Script must be run from project root directory"
fi

if [[ ! -d "supabase" ]]; then
    error "Supabase directory not found. Are you in the right project?"
fi

echo "🗄️  Database Schema Consolidation"
echo "=================================="

# Step 1: Backup existing schemas
info "Creating backups of existing schema files"
BACKUP_DIR="supabase/schema-backups/$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

# Backup all existing schema files
cp supabase/schema.sql "$BACKUP_DIR/schema.sql.bak" 2>/dev/null || true
cp supabase/production_schema.sql "$BACKUP_DIR/production_schema.sql.bak" 2>/dev/null || true
cp supabase/remote_schema.sql "$BACKUP_DIR/remote_schema.sql.bak" 2>/dev/null || true
cp supabase/current_production_schema.sql "$BACKUP_DIR/current_production_schema.sql.bak" 2>/dev/null || true

success "Backups created in $BACKUP_DIR"

# Step 2: Analyze current state
info "Analyzing current schema files"

echo "📊 Schema File Analysis:"
echo "  current_production_schema.sql: $(wc -l < supabase/current_production_schema.sql) lines (MAIN)"
echo "  schema.sql: $(wc -l < supabase/schema.sql) lines (PARTIAL)"
echo "  production_schema.sql: $(wc -l < supabase/production_schema.sql) lines (EMPTY)"
echo "  remote_schema.sql: $(wc -l < supabase/remote_schema.sql) lines (EMPTY)"

# Step 3: Consolidate into single schema.sql
info "Consolidating into single schema.sql (source of truth)"

# Use current_production_schema.sql as the base (it's the complete one)
cp supabase/current_production_schema.sql supabase/schema.sql.new

# Add header comment to identify it as the consolidated schema
cat > supabase/schema.sql.consolidated << 'EOF'
-- ================================================================
-- ClaimGuardian Database Schema - Single Source of Truth
-- ================================================================
-- This file is the consolidated database schema for ClaimGuardian.
-- Generated by schema consolidation script on $(date '+%Y-%m-%d %H:%M:%S')
--
-- IMPORTANT:
-- - This is the SINGLE SOURCE OF TRUTH for database schema
-- - All other schema files should be considered deprecated
-- - Use ./scripts/db.sh to manage schema changes
-- - Never manually edit production database directly
-- ================================================================

EOF

# Append the production schema to the consolidated file
cat supabase/current_production_schema.sql >> supabase/schema.sql.consolidated

# Step 4: Replace the old schema.sql with consolidated version
mv supabase/schema.sql.consolidated supabase/schema.sql

success "Schema consolidated into supabase/schema.sql"

# Step 5: Clean up deprecated files
info "Cleaning up deprecated schema files"

# Remove empty/deprecated files
rm -f supabase/production_schema.sql
rm -f supabase/remote_schema.sql

# Keep current_production_schema.sql as historical reference
mv supabase/current_production_schema.sql "$BACKUP_DIR/historical_production_schema.sql"

success "Deprecated files cleaned up"

# Step 6: Update documentation
info "Updating CLAUDE.md documentation"

# Create consolidated migration record
cat > supabase/SCHEMA_CONSOLIDATION.md << EOF
# Database Schema Consolidation

## What Was Done
- Consolidated multiple schema files into single \`schema.sql\`
- Used \`current_production_schema.sql\` as the source of truth (9,185 lines)
- Removed empty/deprecated files:
  - \`production_schema.sql\` (empty)
  - \`remote_schema.sql\` (empty)
- Preserved backups in \`schema-backups/\`

## Files After Consolidation
- \`supabase/schema.sql\` - **SINGLE SOURCE OF TRUTH**
- All other schema files moved to backups

## Migration Path
1. Use \`./scripts/db.sh schema apply\` to apply changes
2. Use \`./scripts/db.sh schema dump\` to capture production changes
3. Never edit production database directly

## Backup Location
\`$BACKUP_DIR/\`

Generated: $(date '+%Y-%m-%d %H:%M:%S')
EOF

success "Documentation updated"

# Step 7: Validate the consolidated schema
info "Validating consolidated schema"

# Check if schema is valid SQL
if command -v psql >/dev/null 2>&1; then
    info "PostgreSQL client found, performing syntax validation"
    
    # Create temporary database for validation
    if psql -c "SELECT 1;" >/dev/null 2>&1; then
        psql -c "CREATE DATABASE claimguardian_schema_test;" 2>/dev/null || true
        
        if psql -d claimguardian_schema_test -f supabase/schema.sql >/dev/null 2>&1; then
            success "Schema syntax validation passed"
        else
            warn "Schema syntax validation failed - manual review needed"
        fi
        
        # Cleanup test database
        psql -c "DROP DATABASE IF EXISTS claimguardian_schema_test;" 2>/dev/null || true
    else
        warn "Cannot connect to PostgreSQL for validation"
    fi
else
    warn "PostgreSQL client not found, skipping syntax validation"
fi

# Step 8: Summary and next steps
echo ""
echo "🎉 Schema Consolidation Complete!"
echo "=================================="
echo ""
echo "📁 Results:"
echo "  ✅ Single source of truth: supabase/schema.sql ($(wc -l < supabase/schema.sql) lines)"
echo "  ✅ Backups preserved in: $BACKUP_DIR"
echo "  ✅ Deprecated files removed"
echo "  ✅ Documentation updated"
echo ""
echo "🚀 Next Steps:"
echo "  1. Review the consolidated schema: supabase/schema.sql"
echo "  2. Test schema application: ./scripts/db.sh schema apply"
echo "  3. Update TypeScript types: pnpm db:generate-types"
echo "  4. Deploy to staging for testing"
echo ""
echo "⚠️  Important:"
echo "  - The consolidated schema is based on current_production_schema.sql"
echo "  - All migrations are now embedded in the single schema file"
echo "  - Use only ./scripts/db.sh for future schema changes"
echo ""

success "Database schema consolidation completed successfully!"