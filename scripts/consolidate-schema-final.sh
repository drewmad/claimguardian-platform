#!/bin/bash

# Final Database Schema Consolidation Script
# This script consolidates ALL schema files into a single source of truth

set -euo pipefail

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${BLUE}🗄️  Final Database Schema Consolidation${NC}"
echo -e "${BLUE}======================================${NC}"
echo ""

# Check if we're in the right directory
if [[ ! -f "package.json" ]]; then
    echo -e "${RED}ERROR: Script must be run from project root directory${NC}"
    exit 1
fi

# Step 1: Create backup
BACKUP_DIR="supabase/schema-backups/$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

echo -e "${YELLOW}📦 Creating backups...${NC}"
cp -r supabase/sql "$BACKUP_DIR/sql_backup" 2>/dev/null || true
cp -r supabase/migrations "$BACKUP_DIR/migrations_backup" 2>/dev/null || true
cp supabase/schema.sql "$BACKUP_DIR/schema.sql.backup" 2>/dev/null || true
echo -e "${GREEN}✅ Backups created in $BACKUP_DIR${NC}"

# Step 2: Analyze current state
echo ""
echo -e "${YELLOW}📊 Analyzing current schema files...${NC}"
echo "  Main schema.sql: $(wc -l < supabase/schema.sql) lines"
echo "  SQL dir schema.sql: $(wc -l < supabase/sql/schema.sql) lines"
echo "  Migrations: $(ls supabase/migrations/*.sql 2>/dev/null | wc -l) files"
echo "  Additional SQL files: $(ls supabase/sql/*.sql | wc -l) files"

# Step 3: Create new consolidated schema
CONSOLIDATED_FILE="supabase/schema_consolidated.sql"

echo ""
echo -e "${YELLOW}🔨 Creating consolidated schema...${NC}"

# Add header
cat > "$CONSOLIDATED_FILE" << 'EOF'
-- ================================================================
-- ClaimGuardian Complete Database Schema
-- ================================================================
-- Generated: $(date '+%Y-%m-%d %H:%M:%S')
--
-- This is the SINGLE SOURCE OF TRUTH for the ClaimGuardian database.
-- It includes:
-- - Base schema from supabase/sql/schema.sql
-- - All applied migrations
-- - All additional SQL configurations
--
-- IMPORTANT:
-- - Do not edit this file manually
-- - Use migrations for schema changes
-- - Use ./scripts/db.sh for schema management
-- ================================================================

EOF

# Use the larger sql/schema.sql as base (it has more content)
echo -e "${BLUE}  Adding base schema...${NC}"
cat supabase/sql/schema.sql >> "$CONSOLIDATED_FILE"

# Add separator
echo "" >> "$CONSOLIDATED_FILE"
echo "-- ================================================================" >> "$CONSOLIDATED_FILE"
echo "-- MIGRATIONS" >> "$CONSOLIDATED_FILE"
echo "-- ================================================================" >> "$CONSOLIDATED_FILE"
echo "" >> "$CONSOLIDATED_FILE"

# Add all migrations in order
echo -e "${BLUE}  Adding migrations...${NC}"
for migration in supabase/migrations/*.sql; do
    if [[ -f "$migration" && "$migration" != *"README"* ]]; then
        echo "-- Migration: $(basename "$migration")" >> "$CONSOLIDATED_FILE"
        echo "-- ---------------------------------" >> "$CONSOLIDATED_FILE"
        cat "$migration" >> "$CONSOLIDATED_FILE"
        echo "" >> "$CONSOLIDATED_FILE"
        echo "" >> "$CONSOLIDATED_FILE"
    fi
done

# Add separator
echo "-- ================================================================" >> "$CONSOLIDATED_FILE"
echo "-- ADDITIONAL CONFIGURATIONS" >> "$CONSOLIDATED_FILE"
echo "-- ================================================================" >> "$CONSOLIDATED_FILE"
echo "" >> "$CONSOLIDATED_FILE"

# Add additional SQL files (excluding schema.sql itself)
echo -e "${BLUE}  Adding additional SQL configurations...${NC}"
for sqlfile in supabase/sql/*.sql; do
    if [[ -f "$sqlfile" && "$(basename "$sqlfile")" != "schema.sql" ]]; then
        echo "-- File: $(basename "$sqlfile")" >> "$CONSOLIDATED_FILE"
        echo "-- ---------------------------------" >> "$CONSOLIDATED_FILE"
        cat "$sqlfile" >> "$CONSOLIDATED_FILE"
        echo "" >> "$CONSOLIDATED_FILE"
        echo "" >> "$CONSOLIDATED_FILE"
    fi
done

# Step 4: Replace the main schema.sql
echo ""
echo -e "${YELLOW}📝 Replacing main schema.sql...${NC}"
mv supabase/schema.sql "$BACKUP_DIR/old_schema.sql"
mv "$CONSOLIDATED_FILE" supabase/schema.sql

# Step 5: Clean up redundant files
echo ""
echo -e "${YELLOW}🧹 Cleaning up redundant files...${NC}"
# Move sql/schema.sql to backup (it's now in the main schema.sql)
mv supabase/sql/schema.sql "$BACKUP_DIR/sql_schema.sql.backup"

# Create a marker file to indicate consolidation
cat > supabase/sql/CONSOLIDATED.md << EOF
# Schema Consolidated

The schema files have been consolidated into a single source of truth.

## Location
Main schema file: \`../schema.sql\`

## What's included
- Base schema (from sql/schema.sql)
- All migrations
- All additional SQL configurations

## How to manage schema
1. For new changes, create migrations: \`./scripts/db.sh migrate create <name>\`
2. To apply schema: \`./scripts/db.sh schema apply\`
3. To dump current production: \`./scripts/db.sh schema dump\`

Generated: $(date '+%Y-%m-%d %H:%M:%S')
EOF

# Step 6: Create consolidation report
echo ""
echo -e "${YELLOW}📄 Creating consolidation report...${NC}"

REPORT_FILE="supabase/CONSOLIDATION_REPORT_$(date +%Y%m%d).md"
cat > "$REPORT_FILE" << EOF
# Database Schema Consolidation Report

Generated: $(date '+%Y-%m-%d %H:%M:%S')

## Summary
- Consolidated all schema files into single \`supabase/schema.sql\`
- Total lines in consolidated schema: $(wc -l < supabase/schema.sql)
- Backup location: \`$BACKUP_DIR\`

## Files Consolidated
1. Base schema: \`supabase/sql/schema.sql\` ($(wc -l < "$BACKUP_DIR/sql_schema.sql.backup" 2>/dev/null || echo "0") lines)
2. Previous main schema: \`supabase/schema.sql\` ($(wc -l < "$BACKUP_DIR/old_schema.sql" 2>/dev/null || echo "0") lines)
3. Migrations: $(ls "$BACKUP_DIR/migrations_backup"/*.sql 2>/dev/null | wc -l) files
4. Additional SQL files:
$(ls supabase/sql/*.sql 2>/dev/null | grep -v schema.sql | sed 's/^/   - /')

## What Changed
- Created single source of truth at \`supabase/schema.sql\`
- Moved redundant \`supabase/sql/schema.sql\` to backup
- Preserved all migrations in their original location
- Kept additional SQL files for reference

## Next Steps
1. Review the consolidated schema: \`supabase/schema.sql\`
2. Test schema application in development
3. Generate TypeScript types: \`pnpm db:generate-types\`
4. Deploy to staging for testing
5. Archive old migration files if no longer needed

## Important Notes
- The consolidated schema includes ALL database objects
- Future changes should use migrations
- Do not manually edit the consolidated schema
- Use \`./scripts/db.sh\` for all schema operations
EOF

# Step 7: Final summary
echo ""
echo -e "${GREEN}✅ Schema Consolidation Complete!${NC}"
echo ""
echo -e "${BLUE}📊 Results:${NC}"
echo "  • Single schema file: supabase/schema.sql ($(wc -l < supabase/schema.sql) lines)"
echo "  • Backup created: $BACKUP_DIR"
echo "  • Report generated: $REPORT_FILE"
echo ""
echo -e "${YELLOW}📋 Next Steps:${NC}"
echo "  1. Review consolidated schema: supabase/schema.sql"
echo "  2. Run: pnpm db:generate-types"
echo "  3. Test in development environment"
echo ""
echo -e "${GREEN}✨ Database schema is now consolidated into a single source of truth!${NC}"
