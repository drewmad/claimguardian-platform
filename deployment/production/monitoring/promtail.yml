# Promtail Configuration
# ClaimGuardian AI-Powered Insurance Platform Log Shipping

server:
  http_listen_port: 9080
  grpc_listen_port: 0
  log_level: info

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # System logs
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: system
          __path__: /var/log/*log

  # Docker container logs
  - job_name: containers
    static_configs:
      - targets:
          - localhost
        labels:
          job: containers
          __path__: /var/lib/docker/containers/*/*log
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            attrs:
      - json:
          expressions:
            tag:
          source: attrs
      - regex:
          expression: (?P<container_name>(?:[^|]*))\|
          source: tag
      - timestamp:
          format: RFC3339Nano
          source: time
      - labels:
          stream:
          container_name:
      - output:
          source: output

  # ClaimGuardian Web Application logs
  - job_name: claimguardian-web
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["claimguardian.logging=enabled"]
    relabel_configs:
      - source_labels: ["__meta_docker_container_name"]
        regex: "/(.*)"
        target_label: "container"
      - source_labels: ["__meta_docker_container_log_stream"]
        target_label: "logstream"
      - source_labels: ["__meta_docker_container_label_claimguardian_service"]
        target_label: "service"
    pipeline_stages:
      # Parse JSON logs from the web application
      - json:
          expressions:
            level: level
            message: message
            timestamp: timestamp
            user_id: user_id
            request_id: request_id
            method: method
            path: path
            status_code: status_code
            response_time: response_time
            ai_cost: ai_cost
            ai_provider: ai_provider
            ai_model: ai_model
            ai_tokens: ai_tokens
      - timestamp:
          format: RFC3339
          source: timestamp
      - labels:
          level:
          service:
          method:
          ai_provider:
      - output:
          source: message

  # Nginx access logs
  - job_name: nginx-access
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx-access
          __path__: /var/log/nginx/access.log
    pipeline_stages:
      - json:
          expressions:
            remote_addr: remote_addr
            method: method
            uri: uri
            status: status
            body_bytes_sent: body_bytes_sent
            request_time: request_time
            user_agent: user_agent
            referer: referer
      - labels:
          method:
          status:
      - template:
          source: message
          template: "{{ .method }} {{ .uri }} {{ .status }} {{ .request_time }}s"

  # Nginx error logs
  - job_name: nginx-error
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx-error
          __path__: /var/log/nginx/error.log
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[(?P<level>\w+)\] (?P<message>.*)'
      - timestamp:
          format: "2006/01/02 15:04:05"
          source: timestamp
      - labels:
          level:

  # Redis logs
  - job_name: redis
    static_configs:
      - targets:
          - localhost
        labels:
          job: redis
          __path__: /var/log/redis/*.log
    pipeline_stages:
      - regex:
          expression: '^(?P<pid>\d+):(?P<role>\w+) (?P<timestamp>\d{2} \w{3} \d{4} \d{2}:\d{2}:\d{2}\.\d{3}) (?P<level>.) (?P<message>.*)'
      - timestamp:
          format: "02 Jan 2006 15:04:05.000"
          source: timestamp
      - labels:
          level:
          role:

  # AI Cost Tracking logs
  - job_name: ai-costs
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["claimguardian.service=web"]
    relabel_configs:
      - source_labels: ["__meta_docker_container_name"]
        regex: "/(.*)"
        target_label: "container"
    pipeline_stages:
      - json:
          expressions:
            level: level
            message: message
            ai_cost: ai_cost
            ai_provider: ai_provider
            ai_model: ai_model
            ai_tokens: ai_tokens
            user_id: user_id
            request_id: request_id
      - match:
          selector: '{job="ai-costs"} |= "AI_COST"'
          stages:
            - labels:
                ai_provider:
                ai_model:
            - template:
                source: message
                template: "AI Cost: ${{ .ai_cost }} ({{ .ai_provider }}/{{ .ai_model }}) - {{ .ai_tokens }} tokens"

  # Security logs
  - job_name: security
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["claimguardian.service=web"]
    relabel_configs:
      - source_labels: ["__meta_docker_container_name"]
        regex: "/(.*)"
        target_label: "container"
    pipeline_stages:
      - json:
          expressions:
            level: level
            message: message
            event_type: event_type
            user_id: user_id
            ip_address: ip_address
            user_agent: user_agent
            path: path
      - match:
          selector: '{job="security"} |= "SECURITY_EVENT"'
          stages:
            - labels:
                event_type:
                level:
            - template:
                source: message
                template: "Security Event: {{ .event_type }} from {{ .ip_address }} - {{ .message }}"

  # WebSocket logs
  - job_name: websocket
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["claimguardian.service=web"]
    relabel_configs:
      - source_labels: ["__meta_docker_container_name"]
        regex: "/(.*)"
        target_label: "container"
    pipeline_stages:
      - json:
          expressions:
            level: level
            message: message
            connection_id: connection_id
            user_id: user_id
            event_type: event_type
            subscriber_count: subscriber_count
      - match:
          selector: '{job="websocket"} |= "WEBSOCKET"'
          stages:
            - labels:
                event_type:
            - template:
                source: message
                template: "WebSocket {{ .event_type }}: {{ .connection_id }} - {{ .message }}"
