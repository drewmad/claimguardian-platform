{
  "categories": {
    "build": [
      {
        "issue": "Module './schema' was exporting LegalDocument which was already exported from './types/legal-compliance'",
        "solution": "Removed the duplicate export from db/src/index.ts (line 3: `export * from './schema'`)",
        "tags": ["export", "type", "duplicate-export"]
      },
      {
        "issue": "Client-side legal service was trying to call server-side method getClientMetadata",
        "solution": "Created server action `/actions/legal.ts` to handle legal acceptances server-side",
        "tags": ["server-client"]
      },
      {
        "issue": "Importing 'Print' from lucide-react, but the correct icon name is 'Printer'",
        "solution": "Changed import from Print to Printer",
        "tags": ["react", "import"]
      },
      {
        "issue": "Import was looking for SignUpData with capital 'U' but type was SignupData",
        "solution": "Fixed casing to match the actual exported type",
        "tags": ["typescript", "api", "import", "export", "type"]
      },
      {
        "issue": "Code expected signUp to return user object but it returns boolean",
        "solution": "Removed separate consent recording as it's handled server-side during signup",
        "tags": ["type"]
      },
      {
        "issue": "UserLegalAcceptance was not exported from @claimguardian/db",
        "solution": "Changed to use UserConsent which is the correct exported type",
        "tags": ["import", "export", "type"]
      },
      {
        "issue": "Mixing server-side and client-side service methods",
        "solution": "Keep server-side operations in server actions or API routes",
        "tags": ["api", "server-client"]
      },
      {
        "issue": "logger.warn() was called with 3 arguments but only accepts 2",
        "solution": "Removed the third argument (error object)",
        "tags": []
      }
    ]
  },
  "tags": {
    "export": [
      {
        "category": "build",
        "issue": "Module './schema' was exporting LegalDocument which was already exported from './types/legal-compliance'",
        "solution": "Removed the duplicate export from db/src/index.ts (line 3: `export * from './schema'`)"
      },
      {
        "category": "build",
        "issue": "Import was looking for SignUpData with capital 'U' but type was SignupData",
        "solution": "Fixed casing to match the actual exported type"
      },
      {
        "category": "build",
        "issue": "UserLegalAcceptance was not exported from @claimguardian/db",
        "solution": "Changed to use UserConsent which is the correct exported type"
      }
    ],
    "type": [
      {
        "category": "build",
        "issue": "Module './schema' was exporting LegalDocument which was already exported from './types/legal-compliance'",
        "solution": "Removed the duplicate export from db/src/index.ts (line 3: `export * from './schema'`)"
      },
      {
        "category": "build",
        "issue": "Import was looking for SignUpData with capital 'U' but type was SignupData",
        "solution": "Fixed casing to match the actual exported type"
      },
      {
        "category": "build",
        "issue": "Code expected signUp to return user object but it returns boolean",
        "solution": "Removed separate consent recording as it's handled server-side during signup"
      },
      {
        "category": "build",
        "issue": "UserLegalAcceptance was not exported from @claimguardian/db",
        "solution": "Changed to use UserConsent which is the correct exported type"
      }
    ],
    "duplicate-export": [
      {
        "category": "build",
        "issue": "Module './schema' was exporting LegalDocument which was already exported from './types/legal-compliance'",
        "solution": "Removed the duplicate export from db/src/index.ts (line 3: `export * from './schema'`)"
      }
    ],
    "server-client": [
      {
        "category": "build",
        "issue": "Client-side legal service was trying to call server-side method getClientMetadata",
        "solution": "Created server action `/actions/legal.ts` to handle legal acceptances server-side"
      },
      {
        "category": "build",
        "issue": "Mixing server-side and client-side service methods",
        "solution": "Keep server-side operations in server actions or API routes"
      }
    ],
    "react": [
      {
        "category": "build",
        "issue": "Importing 'Print' from lucide-react, but the correct icon name is 'Printer'",
        "solution": "Changed import from Print to Printer"
      }
    ],
    "import": [
      {
        "category": "build",
        "issue": "Importing 'Print' from lucide-react, but the correct icon name is 'Printer'",
        "solution": "Changed import from Print to Printer"
      },
      {
        "category": "build",
        "issue": "Import was looking for SignUpData with capital 'U' but type was SignupData",
        "solution": "Fixed casing to match the actual exported type"
      },
      {
        "category": "build",
        "issue": "UserLegalAcceptance was not exported from @claimguardian/db",
        "solution": "Changed to use UserConsent which is the correct exported type"
      }
    ],
    "typescript": [
      {
        "category": "build",
        "issue": "Import was looking for SignUpData with capital 'U' but type was SignupData",
        "solution": "Fixed casing to match the actual exported type"
      }
    ],
    "api": [
      {
        "category": "build",
        "issue": "Import was looking for SignUpData with capital 'U' but type was SignupData",
        "solution": "Fixed casing to match the actual exported type"
      },
      {
        "category": "build",
        "issue": "Mixing server-side and client-side service methods",
        "solution": "Keep server-side operations in server actions or API routes"
      }
    ]
  },
  "solutions": [
    {
      "key": "already-exported-exporting-from-legaldocument-module-schema-typeslegalcompliance-which",
      "issue": "Module './schema' was exporting LegalDocument which was already exported from './types/legal-compliance'",
      "solution": "Removed the duplicate export from db/src/index.ts (line 3: `export * from './schema'`)",
      "category": "build"
    },
    {
      "key": "call-clientside-getclientmetadata-legal-method-serverside-service-trying",
      "issue": "Client-side legal service was trying to call server-side method getClientMetadata",
      "solution": "Created server action `/actions/legal.ts` to handle legal acceptances server-side",
      "category": "build"
    },
    {
      "key": "correct-from-icon-importing-lucidereact-name-print-printer",
      "issue": "Importing 'Print' from lucide-react, but the correct icon name is 'Printer'",
      "solution": "Changed import from Print to Printer",
      "category": "build"
    },
    {
      "key": "capital-import-looking-signupdata-signupdata-type-with",
      "issue": "Import was looking for SignUpData with capital 'U' but type was SignupData",
      "solution": "Fixed casing to match the actual exported type",
      "category": "build"
    },
    {
      "key": "boolean-code-expected-object-return-returns-signup-user",
      "issue": "Code expected signUp to return user object but it returns boolean",
      "solution": "Removed separate consent recording as it's handled server-side during signup",
      "category": "build"
    },
    {
      "key": "claimguardiandb-exported-from-userlegalacceptance",
      "issue": "UserLegalAcceptance was not exported from @claimguardian/db",
      "solution": "Changed to use UserConsent which is the correct exported type",
      "category": "build"
    },
    {
      "key": "clientside-methods-mixing-serverside-service",
      "issue": "Mixing server-side and client-side service methods",
      "solution": "Keep server-side operations in server actions or API routes",
      "category": "build"
    },
    {
      "key": "accepts-arguments-called-loggerwarn-only-with",
      "issue": "logger.warn() was called with 3 arguments but only accepts 2",
      "solution": "Removed the third argument (error object)",
      "category": "build"
    }
  ],
  "patterns": {}
}
