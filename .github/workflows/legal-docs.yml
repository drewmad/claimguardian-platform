name: Legal Documents Management

on:
  push:
    paths:
      - "legal/**"
    branches:
      - main
  pull_request:
    paths:
      - "legal/**"

jobs:
  validate-legal-docs:
    runs-on: ubuntu-latest
    name: Validate Legal Documents

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Need previous commit for diff

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          npm install -g markdown-it
          npm install -g html-minifier-terser

      - name: Validate markdown files
        run: |
          for file in legal/*.md; do
            if [ -f "$file" ]; then
              echo "Validating $file"
              # Check if file is valid markdown
              markdown-it "$file" > /dev/null || exit 1
              echo "✓ $file is valid"
            fi
          done

      - name: Generate diff for changed files
        if: github.event_name == 'pull_request'
        run: |
          echo "## Legal Document Changes" >> $GITHUB_STEP_SUMMARY
          for file in legal/*.md; do
            if git diff --name-only HEAD~1 HEAD | grep -q "$(basename "$file")"; then
              echo "### Changes in $file" >> $GITHUB_STEP_SUMMARY
              echo '```diff' >> $GITHUB_STEP_SUMMARY
              git diff HEAD~1 HEAD "$file" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          done

  process-legal-docs:
    runs-on: ubuntu-latest
    name: Process and Deploy Legal Documents
    needs: validate-legal-docs
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Supabase CLI
        run: |
          npm install -g supabase

      - name: Install dependencies
        run: |
          npm install -g markdown-it
          npm install -g html-minifier-terser
          npm install -g sha256sum || echo "sha256sum already available"

      - name: Process legal documents
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          # Create output directory
          mkdir -p dist/legal

          # Process each markdown file
          for md_file in legal/*.md; do
            if [ -f "$md_file" ]; then
              filename=$(basename "$md_file" .md)

              echo "Processing $filename..."

              # Convert MD to HTML
              html_file="dist/legal/${filename}.html"
              markdown-it "$md_file" > "$html_file"

              # Minify HTML
              html-minifier-terser \
                --collapse-whitespace \
                --remove-comments \
                --remove-redundant-attributes \
                --use-short-doctype \
                --input "$html_file" \
                --output "$html_file"

              # Generate SHA256 hash
              if command -v sha256sum >/dev/null 2>&1; then
                HASH=$(sha256sum "$html_file" | awk '{print $1}')
              else
                HASH=$(shasum -a 256 "$html_file" | awk '{print $1}')
              fi

              echo "Generated hash for $filename: $HASH"

              # Rename file with hash
              hashed_file="dist/legal/${HASH}.html"
              mv "$html_file" "$hashed_file"

              # Extract metadata from markdown frontmatter
              VERSION=$(grep -m1 '^version:' "$md_file" | sed 's/version: *//g' | tr -d '"' || echo "1.0.0")
              TITLE=$(grep -m1 '^title:' "$md_file" | sed 's/title: *//g' | tr -d '"' || echo "$filename")
              EFFECTIVE_DATE=$(grep -m1 '^effective_date:' "$md_file" | sed 's/effective_date: *//g' | tr -d '"' || date +%Y-%m-%d)

              echo "Metadata: $filename, $TITLE, $VERSION, $EFFECTIVE_DATE"

              # Upload to Supabase Storage
              echo "Uploading to Supabase Storage..."
              supabase storage cp "$hashed_file" "legal/${HASH}.html" \
                --project-ref="$SUPABASE_PROJECT_REF"

              # Get public URL
              STORAGE_URL="https://$SUPABASE_PROJECT_REF.supabase.co/storage/v1/object/public/legal/${HASH}.html"

              # Insert into database
              echo "Inserting into database..."
              PGPASSWORD="$SUPABASE_DB_PASSWORD" psql \
                "postgresql://postgres@db.$SUPABASE_PROJECT_REF.supabase.co:5432/postgres" \
                -c "INSERT INTO legal_documents (slug, title, version, effective_date, sha256_hash, storage_url)
                    VALUES ('$filename', '$TITLE', '$VERSION', '$EFFECTIVE_DATE', '$HASH', '$STORAGE_URL')
                    ON CONFLICT (slug, version) DO UPDATE SET
                      effective_date = EXCLUDED.effective_date,
                      sha256_hash = EXCLUDED.sha256_hash,
                      storage_url = EXCLUDED.storage_url,
                      updated_at = NOW();"

              echo "✓ Processed $filename successfully"
            fi
          done

      - name: Update active document flags
        env:
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          # Set all documents as inactive first
          PGPASSWORD="$SUPABASE_DB_PASSWORD" psql \
            "postgresql://postgres@db.$SUPABASE_PROJECT_REF.supabase.co:5432/postgres" \
            -c "UPDATE legal_documents SET is_active = false;"

          # Set latest version of each slug as active
          PGPASSWORD="$SUPABASE_DB_PASSWORD" psql \
            "postgresql://postgres@db.$SUPABASE_PROJECT_REF.supabase.co:5432/postgres" \
            -c "UPDATE legal_documents SET is_active = true
                WHERE id IN (
                  SELECT DISTINCT ON (slug) id
                  FROM legal_documents
                  ORDER BY slug, effective_date DESC
                );"

      - name: Notify team of deployment
        if: success()
        run: |
          echo "✅ Legal documents processed and deployed successfully"
          echo "Documents are now available at: https://${{ secrets.SUPABASE_PROJECT_REF }}.supabase.co/storage/v1/object/public/legal/"

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Legal documents validated and ready for deployment. Please review the diff above before merging.'
            })
