# This is the main CI/CD pipeline for the ClaimGuardian platform.
# It is optimized for speed and efficiency using:
# 1. Smart caching with Turborepo and GitHub Actions cache
# 2. Conditional job execution based on file changes
# 3. Parallel execution with resource limits
# 4. Vercel deployment verification with health checks
name: Optimized CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.13.1'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  # Define cache keys for different artifacts
  DEPS_CACHE_KEY: deps-node-${{ env.NODE_VERSION }}-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
  TURBO_CACHE_KEY: turbo-${{ runner.os }}-${{ github.sha }}
  BUILD_CACHE_KEY: build-${{ runner.os }}-${{ github.sha }}

jobs:
  # =================================================================
  # STAGE 0: QUICK CHECKS (Fail fast on basic issues)
  # =================================================================
  quick-checks:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      skip-ci: ${{ steps.check-skip.outputs.skip }}
      affected-packages: ${{ steps.affected.outputs.packages }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for CI skip
        id: check-skip
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"[skip ci]"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Detect affected packages
        id: affected
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} || git diff --name-only HEAD~1)
          
          # Determine affected packages
          if echo "$CHANGED_FILES" | grep -q "^apps/web/"; then
            echo "packages=web" >> $GITHUB_OUTPUT
          elif echo "$CHANGED_FILES" | grep -q "^packages/"; then
            echo "packages=packages" >> $GITHUB_OUTPUT
          elif echo "$CHANGED_FILES" | grep -q "^supabase/"; then
            echo "packages=database" >> $GITHUB_OUTPUT
          else
            echo "packages=all" >> $GITHUB_OUTPUT
          fi

  # =================================================================
  # STAGE 1: SETUP (Install Dependencies Once)
  # =================================================================
  setup:
    needs: quick-checks
    if: needs.quick-checks.outputs.skip-ci != 'true'
    name: Setup & Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ env.DEPS_CACHE_KEY }}

      - name: Install dependencies
        # Only run install if the cache didn't exist
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile
      
      - name: Setup Turborepo cache
        run: |
          # Configure Turborepo for remote caching
          echo '{"remoteCache":{"signature":true}}' > .turbo/config.json

  # =================================================================
  # STAGE 2: PARALLEL VALIDATION (Run checks simultaneously)
  # =================================================================
  linting:
    name: Lint
    runs-on: ubuntu-latest
    needs: [setup, quick-checks]
    if: needs.quick-checks.outputs.skip-ci != 'true'
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ env.DEPS_CACHE_KEY }}
          fail-on-cache-miss: true # Fails if setup job didn't cache
      - name: Run ESLint with Turbo
        run: pnpm turbo lint --cache-dir=.turbo

  type-checking:
    name: Type Check
    runs-on: ubuntu-latest
    needs: [setup, quick-checks]
    if: needs.quick-checks.outputs.skip-ci != 'true'
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ env.DEPS_CACHE_KEY }}
          fail-on-cache-miss: true
      - name: Run TypeScript type check with Turbo
        run: pnpm turbo type-check --cache-dir=.turbo

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ env.DEPS_CACHE_KEY }}
          fail-on-cache-miss: true
      - name: Run pnpm audit
        run: pnpm audit --audit-level=high
        continue-on-error: true
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  database-check:
    name: Database Schema Check
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      - name: Check for migration conflicts
        run: |
          if [ -d "supabase/migrations" ]; then
            echo "⚠️ Warning: migrations directory exists. Please use schema.sql instead."
            exit 1
          fi
          if [ -f "supabase/schema.sql" ]; then
            echo "✅ Schema file found"
          fi

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [setup, quick-checks]
    if: needs.quick-checks.outputs.skip-ci != 'true'
    timeout-minutes: 15
    strategy:
      matrix:
        shard: [1, 2]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ env.DEPS_CACHE_KEY }}
          fail-on-cache-miss: true
      - name: Run tests (shard ${{ matrix.shard }}/2)
        run: pnpm turbo test --cache-dir=.turbo -- --shard=${{ matrix.shard }}/2 --coverage
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/coverage-final.json
          flags: unittests-shard-${{ matrix.shard }}
          fail_ci_if_error: false

  # =================================================================
  # STAGE 3: BUILD (Gatekeeper after validation)
  # =================================================================
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [linting, type-checking, test]
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ env.DEPS_CACHE_KEY }}
          fail-on-cache-miss: true
      - name: Restore Turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ env.TURBO_CACHE_KEY }}
          restore-keys: |
            turbo-${{ runner.os }}-
      
      - name: Build all packages with Turbo
        run: pnpm turbo build --cache-dir=.turbo
      
      - name: Check bundle size
        run: |
          # Get bundle size
          BUNDLE_SIZE=$(du -sh apps/web/.next | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"
          
          # Fail if bundle is too large (e.g., > 50MB)
          SIZE_MB=$(du -sm apps/web/.next | cut -f1)
          if [ $SIZE_MB -gt 50 ]; then
            echo "❌ Bundle size exceeds 50MB limit!"
            exit 1
          fi
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/web/.next
            packages/*/dist
          retention-days: 7

  # =================================================================
  # STAGE 4: PULL REQUEST WORKFLOW
  # =================================================================
  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .
      - name: Run bundle size check
        run: |
          find apps/web/.next -name "*.js" -type f | xargs du -ch | grep total > bundle-size.txt
          echo "Bundle size: $(cat bundle-size.txt)"
      - name: Comment PR with bundle size
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const bundleSize = fs.readFileSync('bundle-size.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Bundle Size Report\n\`\`\`\n${bundleSize}\n\`\`\``
            });

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.event_name == 'pull_request'
    timeout-minutes: 15
    outputs:
      deployment-url: ${{ steps.vercel-deploy.outputs.deployment-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Deploy to Vercel
        id: vercel-deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}
      
      - name: Wait for deployment
        run: |
          echo "Deployment URL: ${{ steps.vercel-deploy.outputs.deployment-url }}"
          # Wait for deployment to be ready (max 10 minutes)
          for i in {1..60}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.vercel-deploy.outputs.deployment-url }}")
            if [ $STATUS -eq 200 ]; then
              echo "✅ Deployment is ready!"
              break
            fi
            echo "Waiting for deployment... (attempt $i/60)"
            sleep 10
          done
      
      - name: Run health checks
        run: |
          DEPLOYMENT_URL="${{ steps.vercel-deploy.outputs.deployment-url }}"
          
          # Check main page
          curl -f "${DEPLOYMENT_URL}/" || exit 1
          
          # Check API health
          curl -f "${DEPLOYMENT_URL}/api/health" || exit 1
          
          # Check critical routes
          for route in "/login" "/properties" "/claims"; do
            curl -f "${DEPLOYMENT_URL}${route}" || echo "Warning: Route ${route} returned error"
          done

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: deploy-preview
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - name: Install Playwright
        run: pnpm add -D @playwright/test && pnpm exec playwright install
      - name: Run E2E tests
        run: pnpm exec playwright test
        env:
          PLAYWRIGHT_BASE_URL: ${{ steps.deploy-preview.outputs.preview-url }}
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # =================================================================
  # STAGE 5: PRODUCTION DEPLOYMENT WORKFLOW
  # =================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 20
    environment:
      name: production
      url: https://claimguardianai.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check database migrations
        run: |
          # Ensure no breaking schema changes
          if [ -f "supabase/schema.sql" ]; then
            echo "✅ Schema file found"
          fi
      
      - name: Deploy to Vercel Production
        id: vercel-deploy-prod
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}
      
      - name: Verify production deployment
        run: |
          PROD_URL="https://claimguardianai.com"
          
          # Wait for deployment propagation
          sleep 30
          
          # Health checks
          echo "Running production health checks..."
          
          # Check main site
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${PROD_URL}/")
          if [ $HTTP_STATUS -ne 200 ]; then
            echo "❌ Main site returned $HTTP_STATUS"
            exit 1
          fi
          
          # Check API health
          API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${PROD_URL}/api/health")
          if [ $API_STATUS -ne 200 ]; then
            echo "❌ API health check failed with $API_STATUS"
            exit 1
          fi
          
          # Check critical features
          for endpoint in "/login" "/ai-tools" "/properties"; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${PROD_URL}${endpoint}")
            if [ $STATUS -ne 200 ] && [ $STATUS -ne 307 ]; then
              echo "⚠️  Endpoint ${endpoint} returned $STATUS"
            fi
          done
          
          echo "✅ All production health checks passed!"
      
      - name: Monitor Web Vitals
        run: |
          # Check Core Web Vitals using Google PageSpeed API
          if [ -n "${{ secrets.GOOGLE_PAGESPEED_API_KEY }}" ]; then
            curl -s "https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url=https://claimguardianai.com&key=${{ secrets.GOOGLE_PAGESPEED_API_KEY }}" \
              | jq '.lighthouseResult.categories.performance.score'
          fi
      - name: Create Sentry Release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          version: ${{ github.sha }}
      - name: Rollback on failure
        if: failure()
        run: |
          echo "⚠️  Deployment verification failed! Initiating rollback..."
          # Vercel automatically keeps previous deployments
          # We can trigger a rollback by promoting the previous deployment
          # This would require Vercel API integration
      
      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Production deployment ${{ job.status }}!
            URL: https://claimguardianai.com
            Commit: ${{ github.event.head_commit.message }}
            Author: ${{ github.event.head_commit.author.name }}
            ${{ job.status == 'failure' && '⚠️ Rollback initiated!' || '✅ All systems operational!' }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # =================================================================
  # STAGE 6: POST-DEPLOYMENT MONITORING
  # =================================================================
  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    steps:
      - name: Monitor for 5 minutes
        run: |
          echo "Monitoring production for 5 minutes..."
          PROD_URL="https://claimguardianai.com"
          
          for i in {1..5}; do
            sleep 60
            echo "Health check $i/5"
            
            # Check response times
            RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "${PROD_URL}/api/health")
            echo "API response time: ${RESPONSE_TIME}s"
            
            # Alert if response time > 3s
            if (( $(echo "$RESPONSE_TIME > 3" | bc -l) )); then
              echo "⚠️  High API response time detected!"
            fi
          done