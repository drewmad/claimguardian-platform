# This is the main CI/CD pipeline for the ClaimGuardian platform.
# It is optimized for speed and efficiency using a two-stage approach:
# 1. A single 'setup' job installs dependencies and caches them.
# 2. All subsequent jobs run in parallel, restoring dependencies from the cache almost instantly.
name: Optimized CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.13.1'
  # Define a key for the dependency cache. It's based on the OS and the lockfile hash.
  # This ensures that the cache is only rebuilt when dependencies change.
  DEPS_CACHE_KEY: deps-node-${{ env.NODE_VERSION }}-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}

jobs:
  # =================================================================
  # STAGE 1: SETUP (Install Dependencies Once)
  # =================================================================
  setup:
    name: Setup & Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ env.DEPS_CACHE_KEY }}

      - name: Install dependencies
        # Only run install if the cache didn't exist
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

  # =================================================================
  # STAGE 2: PARALLEL VALIDATION (Run checks simultaneously)
  # =================================================================
  linting:
    name: Lint
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ env.DEPS_CACHE_KEY }}
          fail-on-cache-miss: true # Fails if setup job didn't cache
      - name: Run ESLint
        run: pnpm lint

  type-checking:
    name: Type Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ env.DEPS_CACHE_KEY }}
          fail-on-cache-miss: true
      - name: Run TypeScript type check
        run: pnpm type-check

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ env.DEPS_CACHE_KEY }}
          fail-on-cache-miss: true
      - name: Run pnpm audit
        run: pnpm audit --audit-level=high
        continue-on-error: true
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  database-check:
    name: Database Schema Check
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      - name: Check for migration conflicts
        run: |
          if [ -d "supabase/migrations" ]; then
            echo "⚠️ Warning: migrations directory exists. Please use schema.sql instead."
            exit 1
          fi
          if [ -f "supabase/schema.sql" ]; then
            echo "✅ Schema file found"
          fi

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        shard: [1, 2, 3]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ env.DEPS_CACHE_KEY }}
          fail-on-cache-miss: true
      - name: Run tests (shard ${{ matrix.shard }}/3)
        run: pnpm test -- --shard=${{ matrix.shard }}/3 --coverage
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/coverage-final.json
          flags: unittests-shard-${{ matrix.shard }}
          fail_ci_if_error: false

  # =================================================================
  # STAGE 3: BUILD (Gatekeeper after validation)
  # =================================================================
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [linting, type-checking, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ env.DEPS_CACHE_KEY }}
          fail-on-cache-miss: true
      - name: Build all packages
        run: pnpm build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/web/.next
            packages/*/dist
          retention-days: 7

  # =================================================================
  # STAGE 4: PULL REQUEST WORKFLOW
  # =================================================================
  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .
      - name: Run bundle size check
        run: |
          find apps/web/.next -name "*.js" -type f | xargs du -ch | grep total > bundle-size.txt
          echo "Bundle size: $(cat bundle-size.txt)"
      - name: Comment PR with bundle size
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const bundleSize = fs.readFileSync('bundle-size.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Bundle Size Report\n\`\`\`\n${bundleSize}\n\`\`\``
            });

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --no-wait'
          scope: ${{ secrets.VERCEL_ORG_ID }}

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: deploy-preview
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - name: Install Playwright
        run: pnpm add -D @playwright/test && pnpm exec playwright install
      - name: Run E2E tests
        run: pnpm exec playwright test
        env:
          PLAYWRIGHT_BASE_URL: ${{ steps.deploy-preview.outputs.preview-url }}
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # =================================================================
  # STAGE 5: PRODUCTION DEPLOYMENT WORKFLOW
  # =================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://claimguardian.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}
      - name: Create Sentry Release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          version: ${{ github.sha }}
      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Production deployment ${{ job.status }}!
            Commit: ${{ github.event.head_commit.message }}
            Author: ${{ github.event.head_commit.author.name }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}