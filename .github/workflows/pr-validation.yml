name: PR Validation

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.14.0'

jobs:
  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint --format=github

      - name: Run Prettier
        run: pnpm format:check

      - name: Type checking
        run: pnpm type-check

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: claimguardian_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test:unit
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/claimguardian_test
          NODE_ENV: test

      - name: Run integration tests
        run: pnpm test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/claimguardian_test
          NODE_ENV: test

      - name: Generate coverage report
        run: pnpm test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/claimguardian_test
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: true

  # Build Validation
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Check bundle size
        run: pnpm bundle-analyzer
        continue-on-error: true

  # Security Checks
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten

      - name: Audit npm dependencies
        run: |
          npm audit --audit-level=moderate || exit 1

  # Database Schema Validation
  database:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: claimguardian_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1

      - name: Start Supabase local
        run: |
          supabase start --db-url postgresql://postgres:postgres@localhost:5432/claimguardian_test

      - name: Run migration tests
        run: |
          supabase db reset --db-url postgresql://postgres:postgres@localhost:5432/claimguardian_test
          supabase db push --db-url postgresql://postgres:postgres@localhost:5432/claimguardian_test

      - name: Generate TypeScript types
        run: |
          supabase gen types typescript --db-url postgresql://postgres:postgres@localhost:5432/claimguardian_test > types/database.ts

      - name: Validate schema changes
        run: |
          # Check for breaking schema changes
          node scripts/validate-schema-changes.js

  # Performance Budget
  performance:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for performance testing
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Run bundle size analysis
        run: |
          npx bundlesize

      - name: Check performance budget
        run: |
          # Fail if bundle size exceeds limits
          node scripts/check-performance-budget.js

  # Accessibility Tests
  accessibility:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Start application
        run: pnpm start &
        env:
          PORT: 3000

      - name: Wait for application
        run: npx wait-on http://localhost:3000

      - name: Run accessibility tests
        run: |
          npx @axe-core/cli http://localhost:3000
          npx @axe-core/cli http://localhost:3000/dashboard
          npx @axe-core/cli http://localhost:3000/auth/signin

  # AI Service Validation
  ai-services:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate AI service contracts
        run: pnpm test:ai-contracts
        env:
          # Use test API keys or mock services
          OPENAI_API_KEY: ${{ secrets.OPENAI_TEST_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_TEST_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_TEST_API_KEY }}

      - name: Test AI model fallbacks
        run: pnpm test:ai-fallbacks

  # Comment PR with results
  comment-results:
    runs-on: ubuntu-latest
    needs: [code-quality, test, build, security, database, performance, accessibility]
    if: always()
    steps:
      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'Code Quality': '${{ needs.code-quality.result }}',
              'Tests': '${{ needs.test.result }}',
              'Build': '${{ needs.build.result }}',
              'Security': '${{ needs.security.result }}',
              'Database': '${{ needs.database.result }}',
              'Performance': '${{ needs.performance.result }}',
              'Accessibility': '${{ needs.accessibility.result }}'
            };

            const statusEmoji = {
              'success': '✅',
              'failure': '❌',
              'cancelled': '⏹️',
              'skipped': '⏭️'
            };

            let comment = '## 🔍 PR Validation Results\n\n';
            for (const [check, result] of Object.entries(results)) {
              comment += `${statusEmoji[result] || '❓'} **${check}**: ${result}\n`;
            }

            const allPassed = Object.values(results).every(result => result === 'success');
            
            if (allPassed) {
              comment += '\n🎉 All checks passed! This PR is ready for review.';
            } else {
              comment += '\n⚠️ Some checks failed. Please review and fix the issues above.';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });