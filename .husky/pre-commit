

# Run lockfile validation
pnpm deps:check || exit 1

# Auto-fix lint issues before commit
echo "🔍 Checking for lint issues..."

# First attempt: Check if there are lint errors
if ! pnpm lint --quiet 2>/dev/null; then
  echo "🔧 Lint issues detected. Attempting automatic fixes..."
  
  # Count initial errors
  INITIAL_ERRORS=$(pnpm lint 2>&1 | grep -E "error|warning" | wc -l || echo "0")
  echo "📊 Found $INITIAL_ERRORS issues"
  
  # Attempt 1: Run ESLint fix on staged files
  STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js|jsx|ts|tsx)$' || true)
  if [ -n "$STAGED_FILES" ]; then
    echo "🔧 Fixing staged files..."
    echo "$STAGED_FILES" | xargs npx eslint --fix --quiet || true
    
    # Re-stage any fixed files
    echo "$STAGED_FILES" | xargs git add
  fi
  
  # Attempt 2: Run lint-staged for more comprehensive fixes
  if command -v lint-staged &> /dev/null; then
    echo "🔧 Running lint-staged..."
    npx lint-staged || true
  fi
  
  # Attempt 3: Run targeted fixes for common issues
  echo "🔧 Applying targeted fixes..."
  
  # Fix unescaped entities
  pnpm eslint . --fix --rule "react/no-unescaped-entities: error" --no-eslintrc 2>/dev/null || true
  
  # Fix import order
  pnpm eslint . --fix --rule "import/order: error" --no-eslintrc 2>/dev/null || true
  
  # Fix formatting
  pnpm eslint . --fix --rule "quotes: error" --rule "semi: error" --no-eslintrc 2>/dev/null || true
  
  # Re-stage any changes
  git add -u
  
  # Check if fixes helped
  echo "\n📊 Checking results after auto-fix..."
  if pnpm lint --quiet 2>/dev/null; then
    echo "✅ All lint issues resolved automatically!"
  else
    # Count remaining errors
    REMAINING_ERRORS=$(pnpm lint 2>&1 | grep -E "error|warning" | wc -l || echo "0")
    FIXED=$((INITIAL_ERRORS - REMAINING_ERRORS))
    
    echo "📊 Fixed $FIXED out of $INITIAL_ERRORS issues"
    echo "⚠️  $REMAINING_ERRORS issues require manual intervention"
    
    # Show remaining issues summary
    echo "\n🔍 Remaining issues:"
    pnpm lint 2>&1 | grep -E "error|warning" | head -10
    
    # Provide helpful suggestions
    echo "\n💡 Suggestions:"
    echo "   1. Run 'pnpm lint:fix:all' for more aggressive auto-fixing"
    echo "   2. Run './scripts/lint-gradual-fix.sh' to fix file by file"
    echo "   3. Fix remaining issues manually"
    echo "   4. Use 'HUSKY=0 git commit' to bypass (not recommended)"
    
    exit 1
  fi
else
  echo "✅ No lint issues found"
fi

# Run type-check
pnpm type-check || exit 1

# Auto-fix lint issues before rejecting commit
echo "🤖 Running automatic lint fixes..."
if node scripts/auto-fix-lint.js; then
  echo "✅ All lint issues resolved automatically"
else
  echo "❌ Some lint issues require manual fixing"
  echo ""
  echo "Options:"
  echo "1. Fix the remaining issues manually"
  echo "2. Run 'pnpm lint' to see detailed errors"
  echo "3. Use 'HUSKY=0 git commit' to bypass (not recommended)"
  exit 1
fi

# Database lint and type validation if supabase is running
if supabase status 2>/dev/null | grep -q "API URL"; then
  echo "🔍 Linting database schema..."
  cd apps/web && pnpm db:lint
  
  # Generate fresh types to ensure they're up to date
  echo "🔄 Generating fresh database types..."
  pnpm db:types:local
  
  # Check if types file has uncommitted changes
  if ! git diff --quiet ../../packages/db/src/types/database.types.ts; then
    echo "❌ Database types are out of date. Please commit the updated types."
    echo "Run 'cd apps/web && pnpm db:types:local' to regenerate."
    exit 1
  fi
  cd ../..
fi

# Run prettier check (optional, can be combined with lint)
# pnpm prettier --check . || exit 1

