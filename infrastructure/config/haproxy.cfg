# HAProxy Configuration for ClaimGuardian Production
# High-performance load balancer with health checks and SSL termination

global
    # Security
    chroot /var/lib/haproxy
    user haproxy
    group haproxy
    daemon

    # Performance
    maxconn 4000
    nbproc 1
    nbthread 4

    # SSL Configuration
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets

    # Logging
    log stdout local0 info

    # Stats socket for monitoring
    stats socket /var/lib/haproxy/stats mode 600

defaults
    mode http

    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 10s

    # Options
    option httplog
    option dontlognull
    option http-server-close
    option forwardfor except 127.0.0.0/8
    option redispatch

    # Retries
    retries 3

    # Error pages
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Frontend for HTTPS traffic
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/claimguardian.pem
    mode http

    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options "DENY"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"

    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 50 }

    # Health check endpoint bypass
    acl health_check path_beg /api/health
    use_backend health_backend if health_check

    # API endpoints
    acl is_api path_beg /api
    use_backend api_backend if is_api

    # Static assets
    acl is_static path_beg /_next/static /favicon.ico /robots.txt /sitemap.xml
    use_backend static_backend if is_static

    # Default to app backend
    default_backend app_backend

# Frontend for HTTP traffic (redirect to HTTPS)
frontend http_frontend
    bind *:80
    mode http

    # Redirect all HTTP to HTTPS except health checks
    acl health_check path_beg /api/health
    use_backend health_backend if health_check

    redirect scheme https code 301 if !{ ssl_fc }

# Backend for main application
backend app_backend
    mode http
    balance roundrobin

    # Health check
    option httpchk GET /api/health HTTP/1.1\r\nHost:\ localhost\r\nUser-Agent:\ HAProxy-Health-Check

    # Servers
    server app1 app-1:3000 check inter 30s rise 2 fall 3 maxconn 500 weight 100
    server app2 app-2:3000 check inter 30s rise 2 fall 3 maxconn 500 weight 100

    # Session persistence (optional)
    # cookie SERVERID insert indirect nocache

    # Compression
    compression algo gzip
    compression type text/html text/css text/javascript application/javascript application/json

# Backend for API endpoints (potentially different config)
backend api_backend
    mode http
    balance leastconn

    # Health check
    option httpchk GET /api/health HTTP/1.1\r\nHost:\ localhost

    # Servers
    server app1 app-1:3000 check inter 30s rise 2 fall 3 maxconn 200 weight 100
    server app2 app-2:3000 check inter 30s rise 2 fall 3 maxconn 200 weight 100

    # Timeout adjustments for API calls
    timeout server 120s

    # Request/response modifications
    http-request set-header X-Forwarded-Proto https
    http-request add-header X-Real-IP %[src]

# Backend for static assets (with caching headers)
backend static_backend
    mode http
    balance roundrobin

    # Health check
    option httpchk GET /api/health HTTP/1.1\r\nHost:\ localhost

    # Servers
    server app1 app-1:3000 check inter 60s rise 2 fall 3 maxconn 100 weight 100
    server app2 app-2:3000 check inter 60s rise 2 fall 3 maxconn 100 weight 100

    # Cache headers for static content
    http-response set-header Cache-Control "public, max-age=31536000, immutable"

# Backend for health checks (no authentication required)
backend health_backend
    mode http
    balance roundrobin

    # Servers
    server app1 app-1:3000 check inter 10s rise 1 fall 2 maxconn 50
    server app2 app-2:3000 check inter 10s rise 1 fall 2 maxconn 50

    # Fast timeouts for health checks
    timeout server 5s

# Stats interface for monitoring
listen stats
    bind *:8404
    mode http

    # Authentication (set password via environment variable)
    stats enable
    stats uri /stats
    stats refresh 30s
    stats show-legends
    stats show-node

    # Admin interface (be careful with this in production)
    stats admin if TRUE

    # Hide version for security
    stats hide-version

# Custom error pages
frontend error_pages
    bind *:8080
    mode http

    # Serve custom error pages
    errorfile 503 /etc/haproxy/errors/503.http

    # Maintenance mode
    acl maintenance_mode path_beg /maintenance
    http-request deny if maintenance_mode
