/**
 * @fileMetadata
 * @owner @ai-team
 * @purpose "Brief description of file purpose"
 * @dependencies ["package1", "package2"]
 * @status stable
 * @ai-integration multi-provider
 * @insurance-context claims
 * @supabase-integration edge-functions
 */
"use client";

import {
  FileText,
  Download,
  Printer,
  Mail,
  Share2,
  CheckCircle,
  Clock,
  Calendar,
} from "lucide-react";
import { useState } from "react";
import { toast } from "sonner";
import { logger } from "@/lib/logger/production-logger";

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";

interface ReportSection {
  title: string;
  content: string | React.ReactNode;
  type?: "text" | "table" | "list" | "custom";
}

interface ReportGeneratorProps {
  title: string;
  subtitle?: string;
  sections: ReportSection[];
  metadata?: {
    generatedBy?: string;
    date?: Date;
    referenceNumber?: string;
    status?: string;
  };
  className?: string;
}

export function ReportGenerator({
  title,
  subtitle,
  sections,
  metadata,
  className = "",
}: ReportGeneratorProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [format, setFormat] = useState<"pdf" | "html" | "text">("pdf");

  const generateReport = async () => {
    setIsGenerating(true);
    try {
      // In a real app, this would generate actual PDFs
      // For now, we'll create a simple HTML report
      const reportHtml = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>${title}</title>
          <style>
            body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
            h1 { color: #1e40af; }
            h2 { color: #1f2937; margin-top: 30px; }
            .metadata { background: #f3f4f6; padding: 15px; border-radius: 8px; margin: 20px 0; }
            .section { margin: 20px 0; }
            table { width: 100%; border-collapse: collapse; }
            th, td { border: 1px solid #e5e7eb; padding: 8px; text-align: left; }
            th { background: #f3f4f6; }
            .footer { margin-top: 50px; padding-top: 20px; border-top: 1px solid #e5e7eb; color: #6b7280; font-size: 12px; }
          </style>
        </head>
        <body>
          <h1>${title}</h1>
          ${subtitle ? `<p style="color: #6b7280; font-size: 18px;">${subtitle}</p>` : ""}

          ${
            metadata
              ? `
            <div class="metadata">
              ${metadata.date ? `<p><strong>Date:</strong> ${metadata.date.toLocaleDateString()}</p>` : ""}
              ${metadata.referenceNumber ? `<p><strong>Reference:</strong> ${metadata.referenceNumber}</p>` : ""}
              ${metadata.status ? `<p><strong>Status:</strong> ${metadata.status}</p>` : ""}
              ${metadata.generatedBy ? `<p><strong>Generated By:</strong> ${metadata.generatedBy}</p>` : ""}
            </div>
          `
              : ""
          }

          ${sections
            .map(
              (section) => `
            <div class="section">
              <h2>${section.title}</h2>
              ${typeof section.content === "string" ? `<p>${section.content}</p>` : "<div>[Complex content - see PDF version]</div>"}
            </div>
          `,
            )
            .join("")}

          <div class="footer">
            <p>Generated by ClaimGuardian on ${new Date().toLocaleString()}</p>
            <p>This report is confidential and intended for insurance documentation purposes.</p>
          </div>
        </body>
        </html>
      `;

      // Create and download the file
      const blob = new Blob([reportHtml], { type: "text/html" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `${title.replace(/\s+/g, "_")}_${new Date().toISOString().split("T")[0]}.html`;
      a.click();
      URL.revokeObjectURL(url);

      toast.success("Report generated successfully!");
    } catch (error) {
      logger.error("Report generation error:", {}, error instanceof Error ? error : new Error(String(error)));
      toast.error("Failed to generate report");
    } finally {
      setIsGenerating(false);
    }
  };

  const shareReport = () => {
    toast.info("Share functionality coming soon!");
  };

  const emailReport = () => {
    toast.info("Email functionality coming soon!");
  };

  const printReport = () => {
    window.print();
  };

  return (
    <Card className={`p-6 ${className}`}>
      <div className="mb-6">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-3">
            <FileText className="h-6 w-6 text-blue-600" />
            <div>
              <h3 className="text-xl font-semibold">{title}</h3>
              {subtitle && <p className="text-sm text-gray-600">{subtitle}</p>}
            </div>
          </div>
          <div className="flex items-center gap-2">
            <select
              value={format}
              onChange={(e) =>
                setFormat(e.target.value as "pdf" | "html" | "text")
              }
              className="text-sm border rounded px-2 py-1"
            >
              <option value="pdf">PDF</option>
              <option value="html">HTML</option>
              <option value="text">Text</option>
            </select>
            <Badge variant="outline">{format.toUpperCase()}</Badge>
          </div>
        </div>

        {metadata && (
          <div className="bg-gray-50 rounded-lg p-4 mb-4 text-sm">
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              {metadata.date && (
                <div className="flex items-center gap-2">
                  <Calendar className="h-4 w-4 text-gray-500" />
                  <span>{metadata.date.toLocaleDateString()}</span>
                </div>
              )}
              {metadata.referenceNumber && (
                <div className="flex items-center gap-2">
                  <FileText className="h-4 w-4 text-gray-500" />
                  <span>{metadata.referenceNumber}</span>
                </div>
              )}
              {metadata.status && (
                <div className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4 text-gray-500" />
                  <span>{metadata.status}</span>
                </div>
              )}
              {metadata.generatedBy && (
                <div className="flex items-center gap-2">
                  <Clock className="h-4 w-4 text-gray-500" />
                  <span>{metadata.generatedBy}</span>
                </div>
              )}
            </div>
          </div>
        )}

        <div className="border rounded-lg p-4 bg-white max-h-96 overflow-y-auto">
          {sections.map((section, index) => (
            <div key={index} className="mb-6 last:mb-0">
              <h4 className="font-semibold text-lg mb-2">{section.title}</h4>
              <div className="text-gray-700">{section.content}</div>
            </div>
          ))}
        </div>
      </div>

      <div className="flex flex-wrap gap-2">
        <Button
          onClick={generateReport}
          disabled={isGenerating}
          className="flex-1 sm:flex-none"
        >
          {isGenerating ? (
            <>
              <span className="animate-spin mr-2">‚è≥</span>
              Generating...
            </>
          ) : (
            <>
              <Download className="h-4 w-4 mr-2" />
              Download Report
            </>
          )}
        </Button>
        <Button
          variant="outline"
          onClick={printReport}
          className="flex-1 sm:flex-none"
        >
          <Printer className="h-4 w-4 mr-2" />
          Print
        </Button>
        <Button
          variant="outline"
          onClick={emailReport}
          className="flex-1 sm:flex-none"
        >
          <Mail className="h-4 w-4 mr-2" />
          Email
        </Button>
        <Button
          variant="outline"
          onClick={shareReport}
          className="flex-1 sm:flex-none"
        >
          <Share2 className="h-4 w-4 mr-2" />
          Share
        </Button>
      </div>
    </Card>
  );
}
