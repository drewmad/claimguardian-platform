'use client'\n\nimport { useState, useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { Card, CardContent, CardHeader, CardTitle } from '@claimguardian/ui'\nimport { Button } from '@claimguardian/ui'\nimport { Badge } from '@claimguardian/ui'\nimport { Progress } from '@claimguardian/ui'\nimport { \n  Upload, \n  FileText, \n  Image, \n  CheckCircle, \n  AlertCircle, \n  Brain, \n  Sparkles,\n  Clock,\n  Tag,\n  Zap\n} from 'lucide-react'\nimport { toast } from 'sonner'\nimport { createClient } from '@/lib/supabase/client'\n\ninterface UploadedDocument {\n  id: string\n  fileName: string\n  size: number\n  type: string\n  status: 'uploading' | 'processing' | 'pending_review' | 'auto_confirmed' | 'failed'\n  progress: number\n  aiSuggestions?: {\n    name: string\n    category: string\n    tags: string[]\n    confidence: number\n    metadata: any\n  }\n}\n\nexport function EnhancedDocumentUpload({ \n  propertyId, \n  claimId, \n  onDocumentProcessed \n}: {\n  propertyId?: string\n  claimId?: string\n  onDocumentProcessed?: (document: any) => void\n}) {\n  const [documents, setDocuments] = useState<UploadedDocument[]>([])\n  const [isProcessing, setIsProcessing] = useState(false)\n  const supabase = createClient()\n\n  const onDrop = useCallback(async (acceptedFiles: File[]) => {\n    setIsProcessing(true)\n    \n    for (const file of acceptedFiles) {\n      const docId = crypto.randomUUID()\n      \n      // Add document to state immediately\n      const newDoc: UploadedDocument = {\n        id: docId,\n        fileName: file.name,\n        size: file.size,\n        type: file.type,\n        status: 'uploading',\n        progress: 0\n      }\n      \n      setDocuments(prev => [...prev, newDoc])\n      \n      try {\n        // Upload to processing bucket\n        const { data: user } = await supabase.auth.getUser()\n        if (!user.user) {\n          throw new Error('User not authenticated')\n        }\n        \n        const fileName = `${user.user.id}/${Date.now()}_${file.name}`\n        const { error: uploadError } = await supabase.storage\n          .from('uploads-processing')\n          .upload(fileName, file)\n        \n        if (uploadError) {\n          throw uploadError\n        }\n        \n        // Create document record\n        const { data: docRecord, error: docError } = await supabase\n          .from('intelligent_documents')\n          .insert({\n            id: docId,\n            user_id: user.user.id,\n            property_id: propertyId,\n            claim_id: claimId,\n            original_filename: file.name,\n            storage_path: `uploads-processing/${fileName}`,\n            file_size: file.size,\n            mime_type: file.type,\n            document_hash: await calculateFileHash(file),\n            processing_status: 'uploaded'\n          })\n          .select()\n          .single()\n        \n        if (docError) {\n          throw docError\n        }\n        \n        // Update status to processing\n        setDocuments(prev => prev.map(d => \n          d.id === docId \n            ? { ...d, status: 'processing', progress: 25 }\n            : d\n        ))\n        \n        // Trigger AI processing\n        const { data: processResult, error: processError } = await supabase.functions.invoke(\n          'zero-touch-document-processor',\n          {\n            body: {\n              documentId: docId,\n              bucketName: 'uploads-processing',\n              fileName: fileName\n            }\n          }\n        )\n        \n        if (processError) {\n          throw processError\n        }\n        \n        // Update with AI results\n        const aiResult = processResult.result\n        setDocuments(prev => prev.map(d => \n          d.id === docId \n            ? { \n                ...d, \n                status: aiResult.status === 'auto_confirmed' ? 'auto_confirmed' : 'pending_review',\n                progress: 100,\n                aiSuggestions: {\n                  name: aiResult.suggested_name,\n                  category: aiResult.suggested_category,\n                  tags: [], // Will be populated from tag assignments\n                  confidence: aiResult.confidence,\n                  metadata: aiResult.metadata\n                }\n              }\n            : d\n        ))\n        \n        // Show success notification\n        if (aiResult.status === 'auto_confirmed') {\n          toast.success(`Document automatically processed: ${aiResult.suggested_name}`, {\n            description: `Confidence: ${Math.round(aiResult.confidence * 100)}%`\n          })\n        } else {\n          toast.info(`Document ready for review: ${aiResult.suggested_name}`, {\n            description: 'Please review the AI suggestions'\n          })\n        }\n        \n        onDocumentProcessed?.(aiResult)\n        \n      } catch (error) {\n        console.error('Document processing error:', error)\n        \n        setDocuments(prev => prev.map(d => \n          d.id === docId \n            ? { ...d, status: 'failed', progress: 0 }\n            : d\n        ))\n        \n        toast.error(`Failed to process ${file.name}`, {\n          description: error.message\n        })\n      }\n    }\n    \n    setIsProcessing(false)\n  }, [propertyId, claimId, onDocumentProcessed, supabase])\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'application/pdf': ['.pdf'],\n      'image/*': ['.png', '.jpg', '.jpeg', '.webp', '.tiff'],\n      'text/plain': ['.txt'],\n      'application/msword': ['.doc'],\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx']\n    },\n    maxSize: 50 * 1024 * 1024, // 50MB\n    maxFiles: 10\n  })\n\n  const getStatusIcon = (status: UploadedDocument['status']) => {\n    switch (status) {\n      case 'uploading':\n        return <Upload className=\"w-4 h-4 text-blue-500 animate-pulse\" />\n      case 'processing':\n        return <Brain className=\"w-4 h-4 text-purple-500 animate-pulse\" />\n      case 'pending_review':\n        return <Clock className=\"w-4 h-4 text-yellow-500\" />\n      case 'auto_confirmed':\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />\n      case 'failed':\n        return <AlertCircle className=\"w-4 h-4 text-red-500\" />\n    }\n  }\n\n  const getStatusText = (status: UploadedDocument['status']) => {\n    switch (status) {\n      case 'uploading': return 'Uploading...'\n      case 'processing': return 'AI Processing...'\n      case 'pending_review': return 'Ready for Review'\n      case 'auto_confirmed': return 'Auto-Confirmed'\n      case 'failed': return 'Processing Failed'\n    }\n  }\n\n  const getStatusColor = (status: UploadedDocument['status']) => {\n    switch (status) {\n      case 'uploading': return 'bg-blue-500/10 text-blue-500 border-blue-500/20'\n      case 'processing': return 'bg-purple-500/10 text-purple-500 border-purple-500/20'\n      case 'pending_review': return 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20'\n      case 'auto_confirmed': return 'bg-green-500/10 text-green-500 border-green-500/20'\n      case 'failed': return 'bg-red-500/10 text-red-500 border-red-500/20'\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Upload Area */}\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <Sparkles className=\"w-6 h-6 text-purple-500\" />\n            <CardTitle className=\"text-white text-lg\">\n              Zero-Touch Document Upload\n            </CardTitle>\n            <Badge className=\"bg-purple-500/10 text-purple-500 border-purple-500/20\">\n              <Zap className=\"w-3 h-3 mr-1\" />\n              AI-Powered\n            </Badge>\n          </div>\n          <p className=\"text-gray-400 text-sm\">\n            Upload any document - AI will automatically name it, extract metadata, and create smart tags\n          </p>\n        </CardHeader>\n        \n        <CardContent>\n          <div\n            {...getRootProps()}\n            className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${\n              isDragActive \n                ? 'border-purple-500 bg-purple-500/5' \n                : 'border-gray-600 hover:border-gray-500'\n            }`}\n          >\n            <input {...getInputProps()} />\n            \n            <div className=\"flex flex-col items-center gap-4\">\n              <div className=\"p-3 bg-gray-700 rounded-full\">\n                <Upload className=\"w-6 h-6 text-gray-400\" />\n              </div>\n              \n              {isDragActive ? (\n                <div className=\"space-y-2\">\n                  <p className=\"text-purple-400 font-medium\">\n                    Drop files here to start AI processing\n                  </p>\n                  <p className=\"text-gray-500 text-sm\">\n                    Supported: PDF, Images, Word docs, Text files\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  <p className=\"text-gray-300 font-medium\">\n                    Drag & drop documents or click to browse\n                  </p>\n                  <p className=\"text-gray-500 text-sm\">\n                    AI will automatically analyze and organize your documents\n                  </p>\n                  <div className=\"flex items-center gap-2 text-xs text-gray-600\">\n                    <span>Max 50MB per file</span>\n                    <span>â€¢</span>\n                    <span>Up to 10 files at once</span>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Processing Status */}\n      {documents.length > 0 && (\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white text-lg flex items-center gap-2\">\n              <Brain className=\"w-5 h-5 text-purple-500\" />\n              Processing Status\n              {isProcessing && (\n                <Badge className=\"bg-blue-500/10 text-blue-500 border-blue-500/20\">\n                  <div className=\"animate-pulse\">Processing...</div>\n                </Badge>\n              )}\n            </CardTitle>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-4\">\n            {documents.map((doc) => (\n              <div key={doc.id} className=\"space-y-3\">\n                {/* Document Header */}\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-2 bg-gray-700 rounded\">\n                      {doc.type.startsWith('image/') ? (\n                        <Image className=\"w-4 h-4 text-gray-400\" />\n                      ) : (\n                        <FileText className=\"w-4 h-4 text-gray-400\" />\n                      )}\n                    </div>\n                    \n                    <div>\n                      <p className=\"text-white font-medium truncate max-w-xs\">\n                        {doc.fileName}\n                      </p>\n                      <p className=\"text-gray-500 text-sm\">\n                        {(doc.size / 1024 / 1024).toFixed(1)} MB\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <Badge className={getStatusColor(doc.status)}>\n                    {getStatusIcon(doc.status)}\n                    {getStatusText(doc.status)}\n                  </Badge>\n                </div>\n                \n                {/* Progress Bar */}\n                {doc.status !== 'failed' && doc.status !== 'auto_confirmed' && (\n                  <Progress value={doc.progress} className=\"h-2\" />\n                )}\n                \n                {/* AI Suggestions */}\n                {doc.aiSuggestions && (\n                  <div className=\"bg-gray-900 rounded-lg p-4 space-y-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <Sparkles className=\"w-4 h-4 text-purple-500\" />\n                      <span className=\"text-sm font-medium text-purple-400\">\n                        AI Analysis Results\n                      </span>\n                      <Badge className=\"bg-green-500/10 text-green-500 text-xs\">\n                        {Math.round(doc.aiSuggestions.confidence * 100)}% confident\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-gray-400\">Suggested Name:</span>\n                        <p className=\"text-white font-medium mt-1\">\n                          {doc.aiSuggestions.name}\n                        </p>\n                      </div>\n                      \n                      <div>\n                        <span className=\"text-gray-400\">Category:</span>\n                        <Badge className=\"mt-1 bg-blue-500/10 text-blue-500\">\n                          {doc.aiSuggestions.category}\n                        </Badge>\n                      </div>\n                    </div>\n                    \n                    {/* Extracted Metadata */}\n                    {doc.aiSuggestions.metadata && Object.keys(doc.aiSuggestions.metadata).length > 0 && (\n                      <div>\n                        <span className=\"text-gray-400 text-sm\">Extracted Information:</span>\n                        <div className=\"mt-2 flex flex-wrap gap-2\">\n                          {Object.entries(doc.aiSuggestions.metadata)\n                            .filter(([key, value]) => value && String(value).trim())\n                            .slice(0, 6)\n                            .map(([key, value]) => (\n                            <Badge \n                              key={key}\n                              className=\"bg-gray-700 text-gray-300 text-xs\"\n                            >\n                              <Tag className=\"w-3 h-3 mr-1\" />\n                              {key}: {String(value).substring(0, 20)}{String(value).length > 20 ? '...' : ''}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Instructions */}\n      <Card className=\"bg-gray-900 border-gray-700\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-start gap-3\">\n            <Brain className=\"w-5 h-5 text-purple-500 mt-0.5\" />\n            <div className=\"space-y-2\">\n              <h4 className=\"text-white font-medium\">How Zero-Touch Processing Works</h4>\n              <div className=\"text-gray-400 text-sm space-y-1\">\n                <p>1. <strong>Upload:</strong> Drag & drop any document</p>\n                <p>2. <strong>AI Analysis:</strong> Multiple AI models extract metadata simultaneously</p>\n                <p>3. <strong>Smart Naming:</strong> Generates descriptive filenames with dates, amounts, entities</p>\n                <p>4. <strong>Auto-Tagging:</strong> Creates intelligent tags for easy searching</p>\n                <p>5. <strong>Review/Confirm:</strong> High confidence documents auto-confirm, others need review</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\n// Utility function to calculate file hash\nasync function calculateFileHash(file: File): Promise<string> {\n  const buffer = await file.arrayBuffer()\n  const hashBuffer = await crypto.subtle.digest('SHA-256', buffer)\n  const hashArray = Array.from(new Uint8Array(hashBuffer))\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('')\n}"