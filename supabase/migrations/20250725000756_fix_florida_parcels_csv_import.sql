-- Fix CSV import for florida_parcels table by creating a staging table
-- This handles empty strings and spaces in numeric columns

-- Create a staging table that accepts text for all columns
CREATE TABLE IF NOT EXISTS florida_parcels_staging (
    id uuid DEFAULT gen_random_uuid(),
    parcel_id text,
    co_no text,
    asmnt_yr text,
    jv text,
    av_sd text,
    av_nsd text,
    tv_sd text,
    tv_nsd text,
    dor_uc text,
    pa_uc text,
    land_val text,
    bldg_val text,
    tot_val text,
    act_yr_blt text,
    eff_yr_blt text,
    tot_lvg_ar text,
    land_sqfoot text,
    no_buldng text,
    no_res_unt text,
    own_name text,
    own_addr1 text,
    own_addr2 text,
    own_city text,
    own_state text,
    own_zipcd text,
    phy_addr1 text,
    phy_addr2 text,
    phy_city text,
    phy_zipcd text,
    s_legal text,
    twn text,
    rng text,
    sec text,
    sale_prc1 text,
    sale_yr1 text,
    sale_mo1 text,
    sale_prc2 text,
    sale_yr2 text,
    sale_mo2 text,
    nbrhd_cd text,
    census_bk text,
    mkt_ar text,
    geom text,
    raw_data jsonb,
    data_source text DEFAULT 'FDOR_2025',
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- Create function to transfer and clean data from staging to main table
CREATE OR REPLACE FUNCTION transfer_florida_parcels_staging()
RETURNS void AS $$
BEGIN
    INSERT INTO florida_parcels (
        parcel_id, co_no, asmnt_yr, jv, av_sd, av_nsd, tv_sd, tv_nsd,
        dor_uc, pa_uc, land_val, bldg_val, tot_val, act_yr_blt, eff_yr_blt,
        tot_lvg_ar, land_sqfoot, no_buldng, no_res_unt, own_name, own_addr1,
        own_addr2, own_city, own_state, own_zipcd, phy_addr1, phy_addr2,
        phy_city, phy_zipcd, s_legal, twn, rng, sec, sale_prc1, sale_yr1,
        sale_mo1, sale_prc2, sale_yr2, sale_mo2, nbrhd_cd, census_bk, mkt_ar,
        data_source
    )
    SELECT
        NULLIF(trim(parcel_id), ''),
        CASE WHEN trim(co_no) IN ('', ' ') THEN NULL ELSE co_no::integer END,
        CASE WHEN trim(asmnt_yr) IN ('', ' ') THEN NULL ELSE asmnt_yr::integer END,
        CASE WHEN trim(jv) IN ('', ' ') THEN NULL ELSE jv::numeric END,
        CASE WHEN trim(av_sd) IN ('', ' ') THEN NULL ELSE av_sd::numeric END,
        CASE WHEN trim(av_nsd) IN ('', ' ') THEN NULL ELSE av_nsd::numeric END,
        CASE WHEN trim(tv_sd) IN ('', ' ') THEN NULL ELSE tv_sd::numeric END,
        CASE WHEN trim(tv_nsd) IN ('', ' ') THEN NULL ELSE tv_nsd::numeric END,
        NULLIF(trim(dor_uc), ''),
        NULLIF(trim(pa_uc), ''),
        CASE WHEN trim(land_val) IN ('', ' ') THEN NULL ELSE land_val::numeric END,
        CASE WHEN trim(bldg_val) IN ('', ' ') THEN NULL ELSE bldg_val::numeric END,
        CASE WHEN trim(tot_val) IN ('', ' ') THEN NULL ELSE tot_val::numeric END,
        CASE WHEN trim(act_yr_blt) IN ('', ' ') THEN NULL ELSE act_yr_blt::integer END,
        CASE WHEN trim(eff_yr_blt) IN ('', ' ') THEN NULL ELSE eff_yr_blt::integer END,
        CASE WHEN trim(tot_lvg_ar) IN ('', ' ') THEN NULL ELSE tot_lvg_ar::numeric END,
        CASE WHEN trim(land_sqfoot) IN ('', ' ') THEN NULL ELSE land_sqfoot::numeric END,
        CASE WHEN trim(no_buldng) IN ('', ' ') THEN NULL ELSE no_buldng::integer END,
        CASE WHEN trim(no_res_unt) IN ('', ' ') THEN NULL ELSE no_res_unt::integer END,
        NULLIF(trim(own_name), ''),
        NULLIF(trim(own_addr1), ''),
        NULLIF(trim(own_addr2), ''),
        NULLIF(trim(own_city), ''),
        NULLIF(trim(own_state), ''),
        NULLIF(trim(own_zipcd), ''),
        NULLIF(trim(phy_addr1), ''),
        NULLIF(trim(phy_addr2), ''),
        NULLIF(trim(phy_city), ''),
        NULLIF(trim(phy_zipcd), ''),
        NULLIF(trim(s_legal), ''),
        NULLIF(trim(twn), ''),
        NULLIF(trim(rng), ''),
        NULLIF(trim(sec), ''),
        CASE WHEN trim(sale_prc1) IN ('', ' ') THEN NULL ELSE sale_prc1::numeric END,
        CASE WHEN trim(sale_yr1) IN ('', ' ') THEN NULL ELSE sale_yr1::integer END,
        NULLIF(trim(sale_mo1), ''),
        CASE WHEN trim(sale_prc2) IN ('', ' ') THEN NULL ELSE sale_prc2::numeric END,
        CASE WHEN trim(sale_yr2) IN ('', ' ') THEN NULL ELSE sale_yr2::integer END,
        NULLIF(trim(sale_mo2), ''),
        NULLIF(trim(nbrhd_cd), ''),
        NULLIF(trim(census_bk), ''),
        NULLIF(trim(mkt_ar), ''),
        data_source
    FROM florida_parcels_staging
    WHERE parcel_id IS NOT NULL AND trim(parcel_id) != ''
    ON CONFLICT (parcel_id) DO UPDATE SET
        co_no = EXCLUDED.co_no,
        asmnt_yr = EXCLUDED.asmnt_yr,
        jv = EXCLUDED.jv,
        av_sd = EXCLUDED.av_sd,
        av_nsd = EXCLUDED.av_nsd,
        tv_sd = EXCLUDED.tv_sd,
        tv_nsd = EXCLUDED.tv_nsd,
        dor_uc = EXCLUDED.dor_uc,
        pa_uc = EXCLUDED.pa_uc,
        land_val = EXCLUDED.land_val,
        bldg_val = EXCLUDED.bldg_val,
        tot_val = EXCLUDED.tot_val,
        act_yr_blt = EXCLUDED.act_yr_blt,
        eff_yr_blt = EXCLUDED.eff_yr_blt,
        tot_lvg_ar = EXCLUDED.tot_lvg_ar,
        land_sqfoot = EXCLUDED.land_sqfoot,
        no_buldng = EXCLUDED.no_buldng,
        no_res_unt = EXCLUDED.no_res_unt,
        own_name = EXCLUDED.own_name,
        own_addr1 = EXCLUDED.own_addr1,
        own_addr2 = EXCLUDED.own_addr2,
        own_city = EXCLUDED.own_city,
        own_state = EXCLUDED.own_state,
        own_zipcd = EXCLUDED.own_zipcd,
        phy_addr1 = EXCLUDED.phy_addr1,
        phy_addr2 = EXCLUDED.phy_addr2,
        phy_city = EXCLUDED.phy_city,
        phy_zipcd = EXCLUDED.phy_zipcd,
        s_legal = EXCLUDED.s_legal,
        twn = EXCLUDED.twn,
        rng = EXCLUDED.rng,
        sec = EXCLUDED.sec,
        sale_prc1 = EXCLUDED.sale_prc1,
        sale_yr1 = EXCLUDED.sale_yr1,
        sale_mo1 = EXCLUDED.sale_mo1,
        sale_prc2 = EXCLUDED.sale_prc2,
        sale_yr2 = EXCLUDED.sale_yr2,
        sale_mo2 = EXCLUDED.sale_mo2,
        nbrhd_cd = EXCLUDED.nbrhd_cd,
        census_bk = EXCLUDED.census_bk,
        mkt_ar = EXCLUDED.mkt_ar,
        updated_at = CURRENT_TIMESTAMP;
    
    -- Clear staging table after successful transfer
    TRUNCATE florida_parcels_staging;
END;
$$ LANGUAGE plpgsql;

-- Create view with uppercase columns for CSV import
CREATE OR REPLACE VIEW florida_parcels_csv_import AS
SELECT
    id,
    parcel_id AS "PARCEL_ID",
    co_no AS "CO_NO",
    asmnt_yr AS "ASMNT_YR",
    jv AS "JV",
    av_sd AS "AV_SD",
    av_nsd AS "AV_NSD",
    tv_sd AS "TV_SD",
    tv_nsd AS "TV_NSD",
    dor_uc AS "DOR_UC",
    pa_uc AS "PA_UC",
    land_val AS "LAND_VAL",
    bldg_val AS "BLDG_VAL",
    tot_val AS "TOT_VAL",
    act_yr_blt AS "ACT_YR_BLT",
    eff_yr_blt AS "EFF_YR_BLT",
    tot_lvg_ar AS "TOT_LVG_AR",
    land_sqfoot AS "LAND_SQFOOT",
    no_buldng AS "NO_BULDNG",
    no_res_unt AS "NO_RES_UNT",
    own_name AS "OWN_NAME",
    own_addr1 AS "OWN_ADDR1",
    own_addr2 AS "OWN_ADDR2",
    own_city AS "OWN_CITY",
    own_state AS "OWN_STATE",
    own_zipcd AS "OWN_ZIPCD",
    phy_addr1 AS "PHY_ADDR1",
    phy_addr2 AS "PHY_ADDR2",
    phy_city AS "PHY_CITY",
    phy_zipcd AS "PHY_ZIPCD",
    s_legal AS "S_LEGAL",
    twn AS "TWN",
    rng AS "RNG",
    sec AS "SEC",
    sale_prc1 AS "SALE_PRC1",
    sale_yr1 AS "SALE_YR1",
    sale_mo1 AS "SALE_MO1",
    sale_prc2 AS "SALE_PRC2",
    sale_yr2 AS "SALE_YR2",
    sale_mo2 AS "SALE_MO2",
    nbrhd_cd AS "NBRHD_CD",
    census_bk AS "CENSUS_BK",
    mkt_ar AS "MKT_AR"
FROM florida_parcels_staging;

-- Add helpful comments
COMMENT ON TABLE florida_parcels_staging IS 'Staging table for CSV imports. All columns are text to handle any input. Use transfer_florida_parcels_staging() to move data to main table.';
COMMENT ON VIEW florida_parcels_csv_import IS 'Use this view to import CSV files with uppercase headers. After import, run: SELECT transfer_florida_parcels_staging();';
COMMENT ON FUNCTION transfer_florida_parcels_staging IS 'Transfers data from staging table to main florida_parcels table, converting empty strings to NULL and casting to proper types.';