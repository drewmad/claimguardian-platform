openapi: 3.1.0
info:
  title: ClaimGuardian AI-First Platform API
  description: |
    Comprehensive API for ClaimGuardian's AI-powered insurance claim advocacy platform.
    Supports property management, AI-powered analysis, disaster monitoring, claim optimization,
    subscription management, team collaboration, and admin analytics.
  version: 1.0.0
  contact:
    name: ClaimGuardian API Team
    email: dev@claimguardian.ai
    url: https://claimguardianai.com
  license:
    name: Proprietary
    url: https://claimguardianai.com/license

servers:
  - url: https://claimguardianai.com/api
    description: Production API
  - url: https://staging.claimguardianai.com/api
    description: Staging API
  - url: http://localhost:3000/api
    description: Development API

paths:
  # Subscription Management APIs
  /subscriptions/checkout:
    post:
      summary: Create Stripe checkout session
      description: Initialize a Stripe checkout session for subscription plans
      operationId: createCheckout
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                planId:
                  type: string
                  description: Subscription plan ID (homeowner-essentials, landlord-pro, enterprise)
                successUrl:
                  type: string
                  format: uri
                  description: URL to redirect after successful payment
                cancelUrl:
                  type: string
                  format: uri
                  description: URL to redirect after cancelled payment
              required:
                - planId
      responses:
        '200':
          description: Checkout URL created
          content:
            application/json:
              schema:
                type: object
                properties:
                  checkoutUrl:
                    type: string
                    format: uri
                  sessionId:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /subscriptions:
    get:
      summary: Get user subscription
      description: Retrieve current subscription details for authenticated user
      operationId: getUserSubscription
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Subscription details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      summary: Create or update subscription
      description: Create a new subscription or update existing one
      operationId: createSubscription
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscriptionRequest'
      responses:
        '201':
          description: Subscription created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'

  /subscriptions/cancel:
    post:
      summary: Cancel subscription
      description: Cancel active subscription (effective at period end)
      operationId: cancelSubscription
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Subscription cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  cancelAt:
                    type: string
                    format: date-time

  # Team Management APIs
  /teams:
    get:
      summary: List user teams
      description: Get list of teams user is a member of
      operationId: listTeams
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Teams list
          content:
            application/json:
              schema:
                type: object
                properties:
                  teams:
                    type: array
                    items:
                      $ref: '#/components/schemas/Team'

    post:
      summary: Create a new team/organization
      description: Create a new team for collaborative property and claim management
      operationId: createTeam
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeamRequest'
      responses:
        '201':
          description: Team created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'

  /teams/{teamId}:
    get:
      summary: Get team details
      description: Retrieve detailed information about a specific team
      operationId: getTeam
      security:
        - bearerAuth: []
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Team details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'

    patch:
      summary: Update team
      description: Update team information (owner/admin only)
      operationId: updateTeam
      security:
        - bearerAuth: []
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTeamRequest'
      responses:
        '200':
          description: Team updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'

  /teams/{teamId}/members:
    get:
      summary: List team members
      description: Get list of team members with their roles
      operationId: listTeamMembers
      security:
        - bearerAuth: []
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Team members list
          content:
            application/json:
              schema:
                type: object
                properties:
                  members:
                    type: array
                    items:
                      $ref: '#/components/schemas/TeamMember'

    post:
      summary: Invite team member
      description: Send invitation to join team
      operationId: inviteTeamMember
      security:
        - bearerAuth: []
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [member, admin]
                  default: member
              required:
                - email
      responses:
        '201':
          description: Invitation sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  invitationId:
                    type: string

  # Admin Analytics APIs
  /admin/analytics:
    get:
      summary: Get platform analytics
      description: Retrieve comprehensive platform analytics (admin only)
      operationId: getAdminAnalytics
      security:
        - bearerAuth: []
      parameters:
        - name: timeframe
          in: query
          schema:
            type: string
            enum: [24h, 7d, 30d, 90d, 1y]
            default: 30d
        - name: metrics
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [users, properties, claims, ai_usage, revenue, performance]
          style: form
          explode: false
      responses:
        '200':
          description: Analytics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAnalytics'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/users:
    get:
      summary: List all users
      description: Get paginated list of all platform users (admin only)
      operationId: listAllUsers
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [active, suspended, deleted]
        - name: subscription
          in: query
          schema:
            type: string
            enum: [free, homeowner-essentials, landlord-pro, enterprise]
      responses:
        '200':
          description: Users list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUserListResponse'

  /admin/ai-costs:
    get:
      summary: Get AI usage costs
      description: Retrieve AI provider costs and usage metrics (admin only)
      operationId: getAICosts
      security:
        - bearerAuth: []
      parameters:
        - name: timeframe
          in: query
          schema:
            type: string
            enum: [24h, 7d, 30d]
            default: 7d
        - name: provider
          in: query
          schema:
            type: string
            enum: [openai, anthropic, google]
      responses:
        '200':
          description: AI costs and usage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AICostsResponse'

  # Parcel APIs
  /parcels/search:
    get:
      summary: Search Florida parcels
      description: Search through 8.2M+ Florida parcels by address, owner, or parcel ID
      operationId: searchParcels
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 3
          description: Search query (address, owner name, or parcel ID)
        - name: type
          in: query
          schema:
            type: string
            enum: [all, address, owner, parcel]
            default: all
          description: Type of search to perform
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Maximum number of results
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParcelSearchResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Autocomplete suggestions
      description: Get autocomplete suggestions for parcel search fields
      operationId: parcelAutocomplete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  minLength: 2
                field:
                  type: string
                  enum: [PHY_CITY, OWN_NAME, PHY_ADDR1]
                  default: PHY_CITY
              required:
                - query
      responses:
        '200':
          description: Autocomplete suggestions
          content:
            application/json:
              schema:
                type: object
                properties:
                  suggestions:
                    type: array
                    items:
                      type: string

  /parcels/tiles/{z}/{x}/{y}:
    get:
      summary: Vector tiles for map rendering
      description: Get vector tiles containing parcel data for efficient map rendering
      operationId: getVectorTile
      parameters:
        - name: z
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
            maximum: 22
          description: Zoom level
        - name: x
          in: path
          required: true
          schema:
            type: integer
          description: Tile X coordinate
        - name: y
          in: path
          required: true
          schema:
            type: integer
          description: Tile Y coordinate
      responses:
        '200':
          description: Vector tile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoJSON'

  # Claims APIs
  /claims:
    get:
      summary: List claims
      description: Get paginated list of insurance claims
      operationId: listClaims
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ClaimStatus'
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Claims list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimListResponse'

    post:
      summary: Create new claim
      description: Create a new insurance claim with AI analysis
      operationId: createClaim
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClaimRequest'
      responses:
        '201':
          description: Claim created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Claim'

  /claims/{claimId}:
    get:
      summary: Get claim details
      description: Retrieve detailed information about a specific claim
      operationId: getClaim
      security:
        - bearerAuth: []
      parameters:
        - name: claimId
          in: path
          required: true
          schema:
            type: string
          description: Unique claim identifier
      responses:
        '200':
          description: Claim details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Claim'
        '404':
          $ref: '#/components/responses/NotFound'

  # AI Analysis APIs
  /ai/analyze/damage:
    post:
      summary: Analyze damage from photos
      description: Use AI to analyze property damage from uploaded photos
      operationId: analyzeDamage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                propertyId:
                  type: string
                  description: Associated property ID
                claimId:
                  type: string
                  description: Associated claim ID (optional)
              required:
                - images
                - propertyId
      responses:
        '200':
          description: Damage analysis results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DamageAnalysis'

  /ai/estimate/repair:
    post:
      summary: Generate repair cost estimate
      description: AI-powered repair cost estimation based on damage analysis
      operationId: estimateRepairCosts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                damageAnalysisId:
                  type: string
                location:
                  type: object
                  properties:
                    address:
                      type: string
                    zip:
                      type: string
                    county:
                      type: string
                additionalContext:
                  type: string
                  description: Additional context for estimate
              required:
                - damageAnalysisId
                - location
      responses:
        '200':
          description: Repair cost estimate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepairEstimate'

  # Property Management APIs
  /properties:
    get:
      summary: List user properties
      description: Get list of properties owned by authenticated user
      operationId: listProperties
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Properties list
          content:
            application/json:
              schema:
                type: object
                properties:
                  properties:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'

    post:
      summary: Add new property
      description: Add a new property to user's portfolio
      operationId: createProperty
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePropertyRequest'
      responses:
        '201':
          description: Property created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'

  /properties/{propertyId}:
    get:
      summary: Get property details
      description: Retrieve detailed information about a specific property
      operationId: getProperty
      security:
        - bearerAuth: []
      parameters:
        - name: propertyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Property details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'

    patch:
      summary: Update property
      description: Update property information
      operationId: updateProperty
      security:
        - bearerAuth: []
      parameters:
        - name: propertyId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePropertyRequest'
      responses:
        '200':
          description: Property updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'

  # Weather and Disaster APIs
  /weather/alerts:
    get:
      summary: Get weather alerts
      description: Retrieve active weather alerts and warnings
      operationId: getWeatherAlerts
      parameters:
        - name: county
          in: query
          schema:
            type: string
          description: Florida county name
        - name: zipCode
          in: query
          schema:
            type: string
          description: ZIP code for location-specific alerts
      responses:
        '200':
          description: Weather alerts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherAlertsResponse'

  /hurricanes/tracking:
    get:
      summary: Active hurricane tracking
      description: Get current active hurricane and tropical storm data
      operationId: getHurricaneTracking
      responses:
        '200':
          description: Hurricane tracking data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HurricaneTrackingResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Basic Types
    ClaimStatus:
      type: string
      enum:
        - draft
        - submitted
        - acknowledged
        - investigating
        - approved
        - denied
        - settled
        - closed
        - reopened
        - withdrawn

    PropertyType:
      type: string
      enum:
        - single_family
        - condo
        - townhouse
        - commercial
        - multi_family
        - manufactured
        - vacant_land

    RiskLevel:
      type: string
      enum:
        - minimal
        - low
        - moderate
        - high
        - extreme

    SubscriptionStatus:
      type: string
      enum:
        - active
        - past_due
        - canceled
        - incomplete
        - incomplete_expired
        - trialing
        - unpaid

    TeamRole:
      type: string
      enum:
        - owner
        - admin
        - member

    # Subscription Schemas
    Subscription:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        planId:
          type: string
          enum: [homeowner-essentials, landlord-pro, enterprise]
        status:
          $ref: '#/components/schemas/SubscriptionStatus'
        currentPeriodStart:
          type: string
          format: date-time
        currentPeriodEnd:
          type: string
          format: date-time
        cancelAtPeriodEnd:
          type: boolean
        stripeSubscriptionId:
          type: string
        stripeCustomerId:
          type: string
        metadata:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateSubscriptionRequest:
      type: object
      required:
        - planId
      properties:
        planId:
          type: string
          enum: [homeowner-essentials, landlord-pro, enterprise]
        paymentMethodId:
          type: string
          description: Stripe payment method ID

    # Team Schemas
    Team:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        ownerId:
          type: string
        memberCount:
          type: integer
        settings:
          type: object
          properties:
            allowMemberInvites:
              type: boolean
            requireApprovalForClaims:
              type: boolean
        metadata:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateTeamRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "My Company"
          maxLength: 100
        description:
          type: string
          maxLength: 500
        settings:
          type: object
          properties:
            allowMemberInvites:
              type: boolean
              default: true
            requireApprovalForClaims:
              type: boolean
              default: false

    UpdateTeamRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500
        settings:
          type: object

    TeamMember:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        teamId:
          type: string
        role:
          $ref: '#/components/schemas/TeamRole'
        email:
          type: string
          format: email
        name:
          type: string
        joinedAt:
          type: string
          format: date-time
        lastActiveAt:
          type: string
          format: date-time

    # Admin Analytics Schemas
    AdminAnalytics:
      type: object
      properties:
        timeframe:
          type: string
        metrics:
          type: object
          properties:
            users:
              type: object
              properties:
                total:
                  type: integer
                new:
                  type: integer
                active:
                  type: integer
                retention:
                  type: number
            properties:
              type: object
              properties:
                total:
                  type: integer
                added:
                  type: integer
                averageValue:
                  type: number
            claims:
              type: object
              properties:
                total:
                  type: integer
                submitted:
                  type: integer
                approved:
                  type: integer
                settled:
                  type: integer
                totalValue:
                  type: number
            aiUsage:
              type: object
              properties:
                totalRequests:
                  type: integer
                damageAnalyses:
                  type: integer
                costEstimates:
                  type: integer
                totalCost:
                  type: number
                averageResponseTime:
                  type: number
            revenue:
              type: object
              properties:
                totalRevenue:
                  type: number
                subscriptionRevenue:
                  type: number
                averageRevenuePerUser:
                  type: number
            performance:
              type: object
              properties:
                averageApiResponseTime:
                  type: number
                errorRate:
                  type: number
                uptime:
                  type: number
        trends:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
              properties:
                date:
                  type: string
                  format: date
                value:
                  type: number

    AdminUserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              email:
                type: string
              name:
                type: string
              subscription:
                type: string
              status:
                type: string
              lastActiveAt:
                type: string
                format: date-time
              createdAt:
                type: string
                format: date-time
        totalCount:
          type: integer
        page:
          type: integer
        totalPages:
          type: integer
        hasNextPage:
          type: boolean
        hasPreviousPage:
          type: boolean

    AICostsResponse:
      type: object
      properties:
        timeframe:
          type: string
        totalCost:
          type: number
        providers:
          type: array
          items:
            type: object
            properties:
              provider:
                type: string
              cost:
                type: number
              requestCount:
                type: integer
              models:
                type: array
                items:
                  type: object
                  properties:
                    model:
                      type: string
                    cost:
                      type: number
                    requests:
                      type: integer
        costBreakdown:
          type: object
          properties:
            damageAnalysis:
              type: number
            repairEstimation:
              type: number
            chatbot:
              type: number
            other:
              type: number

    # Complex Types
    ParcelSearchResponse:
      type: object
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              title:
                type: string
              subtitle:
                type: string
              owner:
                type: string
              value:
                type: number
              coordinates:
                type: array
                items:
                  type: number
                minItems: 2
                maxItems: 2
              relevance:
                type: number
              type:
                type: string
        query:
          type: string
        count:
          type: integer
        hasMore:
          type: boolean

    GeoJSON:
      type: object
      properties:
        type:
          type: string
          enum: [FeatureCollection]
        features:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [Feature]
              geometry:
                type: object
              properties:
                type: object

    Claim:
      type: object
      properties:
        id:
          type: string
          description: Unique claim identifier (ULID)
        claimNumber:
          type: string
          description: Human-readable claim number (YYYY-NNNNNN)
        status:
          $ref: '#/components/schemas/ClaimStatus'
        title:
          type: string
        description:
          type: string
        propertyId:
          type: string
        userId:
          type: string
        incidentDate:
          type: string
          format: date
        reportedDate:
          type: string
          format: date-time
        estimatedAmount:
          type: number
          minimum: 0
        actualAmount:
          type: number
          minimum: 0
        insuranceCarrier:
          type: string
        policyNumber:
          type: string
        adjusterId:
          type: string
        metadata:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateClaimRequest:
      type: object
      required:
        - title
        - description
        - propertyId
        - incidentDate
        - estimatedAmount
      properties:
        title:
          type: string
          maxLength: 200
        description:
          type: string
          maxLength: 2000
        propertyId:
          type: string
        incidentDate:
          type: string
          format: date
        estimatedAmount:
          type: number
          minimum: 0
        insuranceCarrier:
          type: string
        policyNumber:
          type: string
        images:
          type: array
          items:
            type: string
            format: binary

    ClaimListResponse:
      type: object
      properties:
        claims:
          type: array
          items:
            $ref: '#/components/schemas/Claim'
        totalCount:
          type: integer
        page:
          type: integer
        totalPages:
          type: integer
        hasNextPage:
          type: boolean
        hasPreviousPage:
          type: boolean

    Property:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        parcelId:
          type: string
        name:
          type: string
        address:
          type: object
          properties:
            street1:
              type: string
            street2:
              type: string
            city:
              type: string
            state:
              type: string
            zip:
              type: string
            county:
              type: string
        coordinates:
          type: array
          items:
            type: number
          minItems: 2
          maxItems: 2
        propertyType:
          $ref: '#/components/schemas/PropertyType'
        yearBuilt:
          type: integer
        squareFeet:
          type: integer
        value:
          type: number
        insurabilityScore:
          type: number
          minimum: 0
          maximum: 100
        riskAssessment:
          type: object
          properties:
            overallRisk:
              $ref: '#/components/schemas/RiskLevel'
            floodRisk:
              $ref: '#/components/schemas/RiskLevel'
            hurricaneRisk:
              $ref: '#/components/schemas/RiskLevel'
            wildfireRisk:
              $ref: '#/components/schemas/RiskLevel'
        metadata:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreatePropertyRequest:
      type: object
      required:
        - name
        - address
        - propertyType
      properties:
        name:
          type: string
          maxLength: 200
        address:
          type: object
          required:
            - street1
            - city
            - state
            - zip
          properties:
            street1:
              type: string
            street2:
              type: string
            city:
              type: string
            state:
              type: string
            zip:
              type: string
            county:
              type: string
        propertyType:
          $ref: '#/components/schemas/PropertyType'
        yearBuilt:
          type: integer
        squareFeet:
          type: integer
        value:
          type: number

    UpdatePropertyRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 200
        address:
          type: object
        propertyType:
          $ref: '#/components/schemas/PropertyType'
        yearBuilt:
          type: integer
        squareFeet:
          type: integer
        value:
          type: number

    DamageAnalysis:
      type: object
      properties:
        id:
          type: string
        claimId:
          type: string
        propertyId:
          type: string
        analysisType:
          type: string
          enum: [photo_analysis, inspector_report, ai_assessment]
        damageItems:
          type: array
          items:
            type: object
            properties:
              category:
                type: string
              severity:
                type: string
                enum: [minor, moderate, major, severe]
              location:
                type: string
              description:
                type: string
              estimatedCost:
                type: number
              confidence:
                type: number
                minimum: 0
                maximum: 1
        totalEstimate:
          type: number
        confidence:
          type: number
          minimum: 0
          maximum: 1
        aiProvider:
          type: string
        modelVersion:
          type: string
        processedAt:
          type: string
          format: date-time

    RepairEstimate:
      type: object
      properties:
        id:
          type: string
        damageAnalysisId:
          type: string
        laborCosts:
          type: number
        materialCosts:
          type: number
        equipmentCosts:
          type: number
        permitCosts:
          type: number
        totalEstimate:
          type: number
        timelineWeeks:
          type: integer
        contractors:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              rating:
                type: number
              estimatedCost:
                type: number
              availability:
                type: string
        marketFactors:
          type: object
          properties:
            laborAvailability:
              type: string
            materialPrices:
              type: string
            seasonalFactors:
              type: array
              items:
                type: string
        createdAt:
          type: string
          format: date-time

    WeatherAlertsResponse:
      type: object
      properties:
        alerts:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              title:
                type: string
              description:
                type: string
              severity:
                type: string
                enum: [minor, moderate, severe, extreme]
              urgency:
                type: string
                enum: [immediate, expected, future, past, unknown]
              certainty:
                type: string
                enum: [observed, likely, possible, unlikely, unknown]
              areas:
                type: array
                items:
                  type: string
              effectiveDate:
                type: string
                format: date-time
              expirationDate:
                type: string
                format: date-time
        lastUpdated:
          type: string
          format: date-time

    HurricaneTrackingResponse:
      type: object
      properties:
        activeStorms:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              category:
                type: integer
                minimum: 0
                maximum: 5
              currentPosition:
                type: object
                properties:
                  latitude:
                    type: number
                  longitude:
                    type: number
              maximumWinds:
                type: integer
              minimumPressure:
                type: integer
              movementDirection:
                type: integer
              movementSpeed:
                type: integer
              forecastTrack:
                type: array
                items:
                  type: object
                  properties:
                    time:
                      type: string
                      format: date-time
                    position:
                      type: object
                      properties:
                        latitude:
                          type: number
                        longitude:
                          type: number
                    intensity:
                      type: integer
        lastUpdated:
          type: string
          format: date-time

  responses:
    BadRequest:
      description: Bad request - Invalid parameters or missing required fields
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              details:
                type: object

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string

    Forbidden:
      description: Access forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string

tags:
  - name: Subscriptions
    description: Subscription and billing management
  - name: Teams
    description: Team and organization management
  - name: Admin
    description: Administrative endpoints and analytics
  - name: Parcels
    description: Florida parcel data and search
  - name: Claims
    description: Insurance claim management
  - name: Properties
    description: Property portfolio management
  - name: AI Analysis
    description: AI-powered damage analysis and estimation
  - name: Weather
    description: Weather alerts and disaster monitoring